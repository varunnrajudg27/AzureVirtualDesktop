{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "vmNames": {
            "type": "array",
            "defaultValue": [
            ],
            "metadata": {
                "description": "Optional. Name(s) of the virtual machine(s). If no explicit names are provided, VM name(s) will be generated based on the vmNamePrefix, vmNumberOfInstances and vmInitialNumber parameters."
            }
        },
        "vmNamePrefix": {
            "type": "string",
            "metadata": {
                "description": "Optional. If no explicit values were provided in the vmNames parameter, this prefix will be used in combination with the vmNumberOfInstances and the vmInitialNumber parameters to create unique VM names. You should use a unique prefix to reduce name collisions in Active Directory. If no value is provided, a 10 character long unique string will be generated based on the Resource Group's name."
            },
            "defaultValue": "[take(toLower(uniqueString(resourceGroup().name)),10)]"
        },
        "vmComputerNames": {
            "type": "object",
            "defaultValue": {},
            "metadata": {
                "description": "Optional. Specifies the VM computer names for the VMs. If the VM name is not in the object as key the VM name is used as computer name. Be aware of the maximum size of 15 characters and limitations regarding special characters for the computer name. Once set it can't be changed via template."
            }
        },
        "vmComputerNamesTransformation": {
            "type": "string",
            "defaultValue": "none",
            "metadata": {
                "description": "Optional. Specifies whether the computer names should be transformed. The transformation is performed on all computer names. Available transformations are 'none' (Default), 'uppercase' and 'lowercase'."
            }
        },
        "vmNumberOfInstances": {
            "type": "int",
            "minValue": 1,
            "maxValue": 800,
            "defaultValue": 1,
            "metadata": {
                "description": "Optional. If no explicit values were provided in the vmNames parameter, this parameter will be used to generate VM names, using the vmNamePrefix and the vmInitialNumber values."
            }
        },
        "vmInitialNumber": {
            "type": "int",
            "metadata": {
                "description": "Optional. If no explicit values were provided in the vmNames parameter, this parameter will be used to generate VM names, using the vmNamePrefix and the vmNumberOfInstances values."
            },
            "defaultValue": 1
        },
        "maxNumberOfVmsPerDeployment": {
            "type": "int",
            "defaultValue": 50,
            "metadata": {
                "description": "Optional. The maximum number of VMs allowed in a single deployment. The template will create additional deployments if the number of VMs to be deployed exceeds this quota."
            }
        },
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Optional. Location for all resources."
            }
        },
        "vmSize": {
            "type": "string",
            "defaultValue": "Standard_D2s_v3",
            "metadata": {
                "description": "Optional. Specifies the size for the VMs"
            }
        },
        "imageReference": {
            "type": "object",
            "defaultValue": {
            },
            "metadata": {
                "description": "Optional. OS image reference. In case of marketplace images, it's the combination of the publisher, offer, sku, version attributes. In case of custom images it's the resource ID of the custom image."
            }
        },
        "plan": {
            "type": "object",
            "defaultValue": {
            },
            "metadata": {
                "description": "Optional. Specifies information about the marketplace image used to create the virtual machine. This element is only used for marketplace images. Before you can use a marketplace image from an API, you must enable the image for programmatic use."
            }
        },
        "osDisk": {
            "type": "object",
            "metadata": {
                "description": "Required. Specifies the OS disk."
            }
        },
        "dataDisks": {
            "type": "array",
            "defaultValue": [
            ],
            "metadata": {
                "description": "Optional. Specifies the data disks."
            }
        },
        "ultraSSDEnabled": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Optional. The flag that enables or disables a capability to have one or more managed data disks with UltraSSD_LRS storage account type on the VM or VMSS. Managed disks with storage account type UltraSSD_LRS can be added to a virtual machine or virtual machine scale set only if this property is enabled."
            }
        },
        "adminUsername": {
            "type": "securestring",
            "metadata": {
                "description": "Required. Administrator username"
            }
        },
        "adminPassword": {
            "type": "securestring",
            "defaultValue": "",
            "metadata": {
                "description": "Required. When specifying a Windows Virtual Machine, this value should be passed"
            }
        },
        "customData": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Custom data associated to the VM, this value will be automatically converted into base64 to account for the expected VM format."
            }
        },
        "windowsConfiguration": {
            "type": "object",
            "defaultValue": {
            },
            "metadata": {
                "description": "Optional. Specifies Windows operating system settings on the virtual machine."
            }
        },
        "linuxConfiguration": {
            "type": "object",
            "defaultValue": {
            },
            "metadata": {
                "description": "Optional. Specifies the Linux operating system settings on the virtual machine."
            }
        },
        "certificatesToBeInstalled": {
            "type": "array",
            "defaultValue": [
            ],
            "metadata": {
                "description": "Optional. Specifies set of certificates that should be installed onto the virtual machine."
            }
        },
        "allowExtensionOperations": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "Optional. Specifies whether extension operations should be allowed on the virtual machine. This may only be set to False when no extensions are present on the virtual machine."
            }
        },
        "availabilitySetNames": {
            "type": "array",
            "defaultValue": [
            ],
            "metadata": {
                "description": "Optional. Name(s) of the availability set(s). If no explicit names are provided, availability set name(s) will be generated based on the availabilitySetName, vmNumberOfInstances and maxNumberOfVmsPerAvSet parameters."
            }
        },
        "availabilitySetName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Creates an availability set with the given name and adds the VMs to it. Cannot be used in combination with availability zone nor scale set."
            }
        },
        "availabilitySetFaultDomain": {
            "type": "int",
            "defaultValue": 2,
            "metadata": {
                "description": "Optional. The number of fault domains to use."
            }
        },
        "availabilitySetUpdateDomain": {
            "type": "int",
            "defaultValue": 5,
            "metadata": {
                "description": "Optional. The number of update domains to use."
            }
        },
        "availabilitySetSku": {
            "type": "string",
            "defaultValue": "Aligned",
            "metadata": {
                "description": "Optional. Sku of the availability set. Use 'Aligned' for virtual machines with managed disks and 'Classic' for virtual machines with unmanaged disks."
            }
        },
        "maxNumberOfVmsPerAvSet": {
            "type": "int",
            "minValue": 1,
            "maxValue": 200,
            "defaultValue": 200,
            "metadata": {
                "description": "Optional. The maximum number of VMs allowed in an availability set. The template will create additional availability sets if the number of VMs to be deployed exceeds this quota."
            }
        },
        "proximityPlacementGroupName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Creates an proximity placement group and adds the VMs to it."
            }
        },
        "proximityPlacementGroupType": {
            "type": "string",
            "allowedValues": [
                "Standard",
                "Ultra"
            ],
            "defaultValue": "Standard",
            "metadata": {
                "description": "Optional. Specifies the type of the proximity placement group."
            }
        },
        "useAvailabilityZone": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Optional. Creates an availability zone and adds the VMs to it. Cannot be used in combination with availability set nor scale set."
            }
        },
        "availabilityZone": {
            "type": "int",
            "defaultValue": 0,
            "allowedValues": [ 0, 1, 2, 3 ],
            "metadata": {
                "description": "Optional. If set to 1, 2 or 3, the availability zone for all VMs is hardcoded to that value. If zero, then the automatic algorithm will be used to give every VM in a different zone (up to three zones). Cannot be used in combination with availability set nor scale set."
            }
        },
        "nicConfigurations": {
            "type": "array",
            "metadata": {
                "description": "Required. Configures NICs and PIPs."
            }
        },
        "vmPriority": {
            "type": "string",
            "defaultValue": "Regular",
            "allowedValues": [
                "Regular",
                "Low",
                "Spot"
            ],
            "metadata": {
                "description": "Optional. Specifies the priority for the virtual machine."
            }
        },
        "enableEvictionPolicy": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Optional. Specifies the eviction policy for the low priority virtual machine. Will result in 'Deallocate' eviction policy."
            }
        },
        "maxPriceForLowPriorityVm": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Specifies the maximum price you are willing to pay for a low priority VM/VMSS. This price is in US Dollars."
            }
        },
        "dedicatedHostId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Specifies resource Id about the dedicated host that the virtual machine resides in."
            }
        },
        "licenseType": {
            "type": "string",
            "defaultValue": "",
            "allowedValues": [
                "Windows_Client",
                "Windows_Server",
                ""
            ],
            "metadata": {
                "description": "Optional. Specifies that the image or disk that is being used was licensed on-premises. This element is only used for images that contain the Windows Server operating system."
            }
        },
        "enableMicrosoftAntiMalware": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Optional. Enables Microsoft Windows Defender AV."
            }
        },
        "microsoftAntiMalwareSettings": {
            "type": "object",
            "defaultValue": {
            },
            "metadata": {
                "description": "Optional. Settings for Microsoft Windows Defender AV extension."
            }
        },
        "enableWindowsMMAAgent": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Optional. Specifies if MMA agent for Windows VM should be enabled."
            }
        },
        "enableLinuxMMAAgent": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Optional. Specifies if MMA agent for Linux VM should be enabled."
            }
        },
        "enableWindowsDependencyAgent": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Optional. Specifies if Azure Dependency Agent for Windows VM should be enabled. Requires WindowsMMAAgent to be enabled."
            }
        },
        "enableLinuxDependencyAgent": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Optional. Specifies if Azure Dependency Agent for Linux VM should be enabled. Requires LinuxMMAAgent to be enabled."
            }
        },
        "enableNetworkWatcherWindows": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Optional. Specifies if Azure Network Watcher Agent for Windows VM should be enabled."
            }
        },
        "enableNetworkWatcherLinux": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Optional. Specifies if Azure Network Watcher Agent for Linux VM should be enabled."
            }
        },
        "enableWindowsDiskEncryption": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Optional. Specifies if Windows VM disks should be encrypted. If enabled, boot diagnostics must be enabled as well."
            }
        },
        "enableServerSideEncryption": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Optional. Specifies if Windows VM disks should be encrypted with Server-side encryption + Customer managed Key."
            }
        },
        "enableLinuxDiskEncryption": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Optional. Specifies if Linux VM disks should be encrypted. If enabled, boot diagnostics must be enabled as well."
            }
        },
        "managedServiceIdentity": {
            "type": "string",
            "defaultValue": "None",
            "allowedValues": [
                "None",
                "SystemAssigned",
                "UserAssigned",
                "SystemAssigned, UserAssigned",
                "UserAssigned, SystemAssigned"
            ],
            "metadata": {
                "description": "Optional. The type of identity used for the virtual machine. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' (default) will remove any identities from the virtual machine."
            }
        },
        "userAssignedIdentities": {
            "type": "object",
            "defaultValue": {},
            "metadata": {
                "description": "Optional. Mandatory if 'managedServiceIdentity' contains UserAssigned. The list of user identities associated with the Virtual Machine."
            }
        },
        "diskKeyEncryptionAlgorithm": {
            "type": "string",
            "defaultValue": "RSA-OAEP",
            "allowedValues": [
                "RSA-OAEP",
                "RSA-OAEP-256",
                "RSA1_5"
            ],
            "metadata": {
                "description": "Optional. Specifies disk key encryption algorithm."
            }
        },
        "keyEncryptionKeyURL": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. URL of the KeyEncryptionKey used to encrypt the volume encryption key"
            }
        },
        "keyVaultUri": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. URL of the Key Vault instance where the Key Encryption Key (KEK) resides"
            }
        },
        "keyVaultId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Resource identifier of the Key Vault instance where the Key Encryption Key (KEK) resides"
            }
        },
        "diskEncryptionVolumeType": {
            "type": "string",
            "defaultValue": "All",
            "allowedValues": [
                "OS",
                "Data",
                "All"
            ],
            "metadata": {
                "description": "Optional. Type of the volume OS or Data to perform encryption operation"
            }
        },
        "forceUpdateTag": {
            "type": "string",
            "defaultValue": "1.0",
            "metadata": {
                "description": "Optional. Pass in an unique value like a GUID everytime the operation needs to be force run"
            }
        },
        "resizeOSDisk": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Optional. Should the OS partition be resized to occupy full OS VHD before splitting system volume"
            }
        },
        "windowsScriptExtensionFileData": {
            "type": "array",
            "defaultValue": [
            ],
            "metadata": {
                "description": "Optional. Array of objects that specifies URIs and the storageAccountId of the scripts that need to be downloaded and run by the Custom Script Extension on a Windows VM."
            }
        },
        "windowsScriptExtensionCommandToExecute": {
            "type": "securestring",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Specifies the command that should be run on a Windows VM."
            }
        },
        "cseStorageAccountName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. The name of the storage account to access for the CSE script(s)."
            }
        },
        "cseStorageAccountKey": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. The storage key of the storage account to access for the CSE script(s)."
            }
        },
        "cseManagedIdentity": {
            "type": "object",
            "defaultValue": {},
            "metadata": {
                "description": "Optional. A managed identity to use for the CSE."
            }
        },
        "backupVaultName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Recovery service vault name to add VMs to backup."
            }
        },
        "backupVaultResourceGroup": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Resource group of the backup recovery service vault."
            }
        },
        "backupPolicyName": {
            "type": "string",
            "defaultValue": "DefaultPolicy",
            "metadata": {
                "description": "Optional. Backup policy the VMs should be using for backup."
            }
        },
        "domainName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Specifies the FQDN the of the domain the VM will be joined to. Currently implemented for Windows VMs only"
            }
        },
        "domainJoinUser": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Mandatory if domainName is specified. User used for the join to the domain. Format: username@domainFQDN"
            }
        },
        "domainJoinOU": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Specifies an organizational unit (OU) for the domain account. Enter the full distinguished name of the OU in quotation marks. Example: \"OU=testOU; DC=domain; DC=Domain; DC=com\""
            }
        },
        "domainJoinPassword": {
            "type": "securestring",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Required if domainName is specified. Password of the user specified in domainJoinUser parameter"
            }
        },
        "domainJoinRestart": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Optional. Controls the restart of vm after executing domain join"
            }
        },
        "domainJoinOptions": {
            "type": "int",
            "defaultValue": 3,
            "metadata": {
                "description": "Optional. Set of bit flags that define the join options. Default value of 3 is a combination of NETSETUP_JOIN_DOMAIN (0x00000001) & NETSETUP_ACCT_CREATE (0x00000002) i.e. will join the domain and create the account on the domain. For more information see https://msdn.microsoft.com/en-us/library/aa392154(v=vs.85).aspx"
            }
        },
        "dscConfiguration": {
            "type": "object",
            "defaultValue": {
            },
            "metadata": {
                "description": "Optional. The DSC configuration object"
            }
        },
        "bootDiagnosticStorageAccountName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Storage account used to store boot diagnostic information. Boot diagnostics will be disabled if no value is provided."
            }
        },
        "bootDiagnosticStorageAccountUri": {
            "type": "string",
            "defaultValue": ".blob.core.windows.net/",
            "metadata": {
                "description": "Optional. Storage account boot diagnostic base URI."
            }
        },
        "diagnosticSettingName": {
            "type": "string",
            "defaultValue": "service",
            "metadata": {
                "description": "Optional. The name of the Diagnostic setting."
            }
        },
        "diagnosticLogsRetentionInDays": {
            "type": "int",
            "defaultValue": 365,
            "minValue": 0,
            "maxValue": 365,
            "metadata": {
                "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
            }
        },
        "diagnosticStorageAccountId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Resource identifier of the Diagnostic Storage Account."
            }
        },
        "workspaceId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Resource identifier of Log Analytics."
            }
        },
        "eventHubAuthorizationRuleId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Resource ID of the event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
            }
        },
        "eventHubName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Name of the event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
            }
        },
        "lockForDeletion": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Optional. Switch to lock VM from deletion."
            }
        },
        "roleAssignments": {
            "defaultValue": [
            ],
            "type": "array",
            "metadata": {
                "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'"
            }
        },
        "tags": {
            "type": "object",
            "defaultValue": {
            },
            "metadata": {
                "description": "Optional. Tags of the resource."
            }
        },
        "cuaId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Customer Usage Attribution id (GUID). This GUID must be previously registered"
            }
        },
        "baseTime": {
            "type": "string",
            "defaultValue": "[utcNow('u')]",
            "metadata": {
                "description": "Generated. Do not provide a value! This date value is used to generate a registration token."
            }
        },
        "sasTokenValidityLength": {
            "defaultValue": "PT8H",
            "type": "string",
            "metadata": {
                "description": "Optional. SAS token validity length to use to download files from storage accounts. Usage: 'PT8H' - valid for 8 hours; 'P5D' - valid for 5 days; 'P1Y' - valid for 1 year. When not provided, the SAS token will be valid for 8 hours."
            }
        }
    },
    "variables": {
        "diagnosticsMetrics": [
            {
                "category": "AllMetrics",
                "timeGrain": null,
                "enabled": true,
                "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                }
            }
        ],
        "identity": {
            "type": "[parameters('managedServiceIdentity')]",
            "userAssignedIdentities": "[if(empty(parameters('userAssignedIdentities')),json('null'),parameters('userAssignedIdentities') )]"
        },
        "pidName": "[concat('pid-', parameters('cuaId'))]",
        "copy": [
            {
                "name": "vmGeneratedNames",
                "count": "[parameters('vmNumberOfInstances')]",
                "input": "[concat(parameters('vmNamePrefix'), padLeft( copyIndex('vmGeneratedNames', parameters('vmInitialNumber') ),3,'0' ) )]"
            },
            {
                "name": "avSetGeneratedNames",
                "count": "[if(equals(mod(parameters('vmNumberOfInstances'), parameters('maxNumberOfVmsPerAvSet')), 0), div(parameters('vmNumberOfInstances'), parameters('maxNumberOfVmsPerAvSet') ), add(div(parameters('vmNumberOfInstances'), parameters('maxNumberOfVmsPerAvSet') ),1))]",
                "input": "[concat(parameters('availabilitySetName'), '-', padLeft( copyIndex('avSetGeneratedNames', 1 ),3,'0' ) )]"
            },
            {
                "name": "availabilityZones",
                "count": "[length(variables('vmNames'))]",
                "input": "[if(equals(parameters('availabilityZone'), 0), string(add(mod(copyIndex('availabilityZones'), 3), 1)), string(parameters('availabilityZone')))]"
            }
        ],
        "vmNames": "[if( empty( parameters('vmNames') ), variables('vmGeneratedNames'), parameters('vmNames') )]",
        "avSetNames": "[if(and(empty( parameters('availabilitySetNames')), empty( parameters('availabilitySetName'))), json('[]'), if(empty( parameters('availabilitySetNames') ), variables('avSetGeneratedNames'), parameters('availabilitySetNames')))]",
        "accountSasProperties": {
            "signedServices": "b", //Blob (b), Queue (q), Table (t), File (f).
            "signedPermission": "r", //Read (r), Write (w), Delete (d), List (l), Add (a), Create (c), Update (u) and Process (p)
            "signedExpiry": "[dateTimeAdd(parameters('baseTime'), parameters('sasTokenValidityLength'))]", //format: 2017-05-24T10:42:03Z
            "signedResourceTypes": "o", //Service (s): Access to service-level APIs; Container (c): Access to container-level APIs; Object (o): Access to object-level APIs for blobs, queue messages, table entities, and files.
            "signedProtocol": "https"
        },
        "builtInRoleNames": {
            "Avere Cluster Create": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'a7b1b19a-0e83-4fe5-935c-faaefbfd18c3')]",
            "Avere Cluster Runtime Operator": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'e078ab98-ef3a-4c9a-aba7-12f5172b45d0')]",
            "Avere Contributor": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '4f8fab4f-1852-4a58-a46a-8eaf358af14a')]",
            "Avere Operator": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'c025889f-8102-4ebf-b32c-fc0c6f0c6bd9')]",
            "Azure Service Deploy Release Management Contributor": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '21d96096-b162-414a-8302-d8354f9d91b2')]",
            "Contributor": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
            "CAL-Custom-Role": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '7b266cd7-0bba-4ae2-8423-90ede5e1e898')]",
            "DevTest Labs User": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '76283e04-6283-4c54-8f91-bcf1374a3c64')]",
            "Log Analytics Contributor": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
            "Log Analytics Reader": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '73c42c96-874c-492b-b04d-ab87d138a893')]",
            "masterreader": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'a48d7796-14b4-4889-afef-fbb65a93e5a2')]",
            "Managed Application Contributor Role": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
            "Managed Application Operator Role": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
            "Managed Applications Reader": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
            "Microsoft OneAsset Reader": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'fd1bb084-1503-4bd2-99c0-630220046786')]",
            "Monitoring Contributor": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
            "Monitoring Metrics Publisher": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '3913510d-42f4-4e42-8a64-420c390055eb')]",
            "Monitoring Reader": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
            "Owner": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
            "Reader": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
            "Reservation Purchaser": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'f7b75c60-3036-4b75-91c3-6b41c27c1689')]",
            "Resource Policy Contributor": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
            "User Access Administrator": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
            "Virtual Machine Administrator Login": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '1c0163c0-47e6-4577-8991-ea5c82e286e4')]",
            "Virtual Machine Contributor": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '9980e02c-c2be-4d73-94e8-173b1dc7cf3c')]",
            "Virtual Machine User Login": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'fb879df8-f326-4884-b1cf-06f3ad86be52')]"
        }
    },
    "resources": [
        // CUA ID
        {
            "condition": "[not(empty(parameters('cuaId')))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-06-01",
            "name": "[variables('pidName')]",
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": [
                    ]
                }
            }
        },
        // Proximity Placement Groups
        {
            "type": "Microsoft.Compute/proximityPlacementGroups",
            "apiVersion": "2020-12-01",
            "condition": "[not(empty(parameters('proximityPlacementGroupName')))]",
            "location": "[parameters('location')]",
            "tags": "[parameters('tags')]",
            "name": "[if(not(empty(parameters('proximityPlacementGroupName'))),parameters('proximityPlacementGroupName'),'dummyProximityGroup')]",
            "properties": {
                "proximityPlacementGroupType": "[parameters('proximityPlacementGroupType')]"
            }
        },
        // Availability Sets
        {
            "type": "Microsoft.Compute/availabilitySets",
            "apiVersion": "2020-12-01",
            "condition": "[not(empty(variables('avSetNames')))]",
            "location": "[parameters('location')]",
            "tags": "[parameters('tags')]",
            "name": "[if(not(empty(variables('avSetNames'))),variables('avSetNames')[copyIndex('avSetLoop')],'dummyAvailabilitySet')]",
            "dependsOn": [
                "[if(not(empty(parameters('proximityPlacementGroupName'))),parameters('proximityPlacementGroupName'),'dummyProximityGroup')]"
            ],
            "copy": {
                "name": "avSetLoop",
                "count": "[length(variables('avSetNames'))]"
            },
            "properties": {
                "platformFaultDomainCount": "[parameters('availabilitySetFaultDomain')]",
                "platformUpdateDomainCount": "[parameters('availabilitySetUpdateDomain')]",
                "proximityPlacementGroup": "[if(empty(parameters('proximityPlacementGroupName')), json('null'), json(concat('{\"id\":\"', resourceId('Microsoft.Compute/proximityPlacementGroups', parameters('proximityPlacementGroupName')),'\"}')))]"
            },
            "sku": {
                "name": "[parameters('availabilitySetSku')]"
            }
        },
        // Deployment bulkVMdeployment
        {
            "name": "[concat('bulkVMdeployment-', copyIndex('vmDepBulkVMdeployment'))]",
            "apiVersion": "2020-06-01",
            "type": "Microsoft.Resources/deployments",
            "dependsOn": [
                "avSetLoop"
            ],
            "copy": {
                "name": "vmDepBulkVMdeployment",
                "count": "[if(equals(mod(length(variables('vmNames')), parameters('maxNumberOfVmsPerDeployment')), 0), div(length(variables('vmNames')), parameters('maxNumberOfVmsPerDeployment') ), add(div(length(variables('vmNames')), parameters('maxNumberOfVmsPerDeployment') ),1))]"
            },
            "properties": {
                "mode": "Incremental",
                "expressionEvaluationOptions": {
                    "scope": "Inner"
                },
                "parameters": {
                    "vmNames": {
                        "value": "[take( skip(variables('vmNames'), mul( copyIndex(), parameters('maxNumberOfVmsPerDeployment') ) ), parameters('maxNumberOfVmsPerDeployment'))]"
                    },
                    "nicConfigurations": {
                        "value": "[parameters('nicConfigurations')]"
                    },
                    "avSetNames": {
                        "value": "[variables('avSetNames')]"
                    },
                    "maxNumberOfVmsPerAvSet": {
                        "value": "[parameters('maxNumberOfVmsPerAvSet')]"
                    },
                    "maxNumberOfVmsPerDeployment": {
                        "value": "[parameters('maxNumberOfVmsPerDeployment')]"
                    },
                    "bulkVMdeploymentLoopIndex": {
                        "value": "[copyIndex('vmDepBulkVMdeployment')]"
                    },
                    "proximityPlacementGroupName": {
                        "value": "[parameters('proximityPlacementGroupName')]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "tags": {
                        "value": "[parameters('tags')]"
                    },
                    "vmComputerNames": {
                        "value": "[parameters('vmComputerNames')]"
                    },
                    "vmComputerNamesTransformation": {
                        "value": "[parameters('vmComputerNamesTransformation')]"
                    },
                    "useAvailabilityZone": {
                        "value": "[parameters('useAvailabilityZone')]"
                    },
                    "availabilityZones": {
                        "value": "[variables('availabilityZones')]"
                    },
                    "plan": {
                        "value": "[parameters('plan')]"
                    },
                    "lockForDeletion": {
                        "value": "[parameters('lockForDeletion')]"
                    },
                    "diagnosticSettingName": {
                        "value": "[parameters('diagnosticSettingName')]"
                    },
                    "diagnosticStorageAccountId": {
                        "value": "[parameters('diagnosticStorageAccountId')]"
                    },
                    "workspaceId": {
                        "value": "[parameters('workspaceId')]"
                    },
                    "eventHubAuthorizationRuleId": {
                        "value": "[parameters('eventHubAuthorizationRuleId')]"
                    },
                    "eventHubName": {
                        "value": "[parameters('eventHubName')]"
                    },
                    "diagnosticsMetrics": {
                        "value": "[variables('diagnosticsMetrics')]"
                    },
                    "diagnosticLogsRetentionInDays": {
                        "value": "[parameters('diagnosticLogsRetentionInDays')]"
                    },
                    "vmSize": {
                        "value": "[parameters('vmSize')]"
                    },
                    "imageReference": {
                        "value": "[parameters('imageReference')]"
                    },
                    "osDisk": {
                        "value": "[parameters('osDisk')]"
                    },
                    "dataDisks": {
                        "value": "[parameters('dataDisks')]"
                    },
                    "enableServerSideEncryption": {
                        "value": "[parameters('enableServerSideEncryption')]"
                    },
                    "ultraSSDEnabled": {
                        "value": "[parameters('ultraSSDEnabled')]"
                    },
                    "adminUsername": {
                        "value": "[parameters('adminUsername')]"
                    },
                    "adminPassword": {
                        "value": "[parameters('adminPassword')]"
                    },
                    "customData": {
                        "value": "[parameters('customData')]"
                    },
                    "windowsConfiguration": {
                        "value": "[parameters('windowsConfiguration')]"
                    },
                    "linuxConfiguration": {
                        "value": "[parameters('linuxConfiguration')]"
                    },
                    "certificatesToBeInstalled": {
                        "value": "[parameters('certificatesToBeInstalled')]"
                    },
                    "allowExtensionOperations": {
                        "value": "[parameters('allowExtensionOperations')]"
                    },
                    "bootDiagnosticStorageAccountName": {
                        "value": "[parameters('bootDiagnosticStorageAccountName')]"
                    },
                    "bootDiagnosticStorageAccountUri": {
                        "value": "[parameters('bootDiagnosticStorageAccountUri')]"
                    },
                    "vmPriority": {
                        "value": "[parameters('vmPriority')]"
                    },
                    "enableEvictionPolicy": {
                        "value": "[parameters('enableEvictionPolicy')]"
                    },
                    "dedicatedHostId": {
                        "value": "[parameters('dedicatedHostId')]"
                    },
                    "licenseType": {
                        "value": "[parameters('licenseType')]"
                    },
                    "domainName": {
                        "value": "[parameters('domainName')]"
                    },
                    "domainJoinUser": {
                        "value": "[parameters('domainJoinUser')]"
                    },
                    "domainJoinOU": {
                        "value": "[parameters('domainJoinOU')]"
                    },
                    "domainJoinRestart": {
                        "value": "[parameters('domainJoinRestart')]"
                    },
                    "domainJoinOptions": {
                        "value": "[parameters('domainJoinOptions')]"
                    },
                    "domainJoinPassword": {
                        "value": "[parameters('domainJoinPassword')]"
                    },
                    "enableMicrosoftAntiMalware": {
                        "value": "[parameters('enableMicrosoftAntiMalware')]"
                    },
                    "microsoftAntiMalwareSettings": {
                        "value": "[parameters('microsoftAntiMalwareSettings')]"
                    },
                    "enableWindowsMMAAgent": {
                        "value": "[parameters('enableWindowsMMAAgent')]"
                    },
                    "enableLinuxMMAAgent": {
                        "value": "[parameters('enableLinuxMMAAgent')]"
                    },
                    "enableWindowsDiskEncryption": {
                        "value": "[parameters('enableWindowsDiskEncryption')]"
                    },
                    "forceUpdateTag": {
                        "value": "[parameters('forceUpdateTag')]"
                    },
                    "keyVaultUri": {
                        "value": "[parameters('keyVaultUri')]"
                    },
                    "keyVaultId": {
                        "value": "[parameters('keyVaultId')]"
                    },
                    "keyEncryptionKeyURL": {
                        "value": "[parameters('keyEncryptionKeyURL')]"
                    },
                    "diskKeyEncryptionAlgorithm": {
                        "value": "[parameters('diskKeyEncryptionAlgorithm')]"
                    },
                    "diskEncryptionVolumeType": {
                        "value": "[parameters('diskEncryptionVolumeType')]"
                    },
                    "resizeOSDisk": {
                        "value": "[parameters('resizeOSDisk')]"
                    },
                    "enableLinuxDiskEncryption": {
                        "value": "[parameters('enableLinuxDiskEncryption')]"
                    },
                    "enableWindowsDependencyAgent": {
                        "value": "[parameters('enableWindowsDependencyAgent')]"
                    },
                    "enableLinuxDependencyAgent": {
                        "value": "[parameters('enableLinuxDependencyAgent')]"
                    },
                    "enableNetworkWatcherWindows": {
                        "value": "[parameters('enableNetworkWatcherWindows')]"
                    },
                    "enableNetworkWatcherLinux": {
                        "value": "[parameters('enableNetworkWatcherLinux')]"
                    },
                    "identity": {
                        "value": "[variables('identity')]"
                    },
                    "dscConfiguration": {
                        "value": "[parameters('dscConfiguration')]"
                    },
                    "windowsScriptExtensionFileData": {
                        "value": "[parameters('windowsScriptExtensionFileData')]"
                    },
                    "windowsScriptExtensionCommandToExecute": {
                        "value": "[parameters('windowsScriptExtensionCommandToExecute')]"
                    },
                    "cseStorageAccountName": {
                        "value": "[parameters('cseStorageAccountName')]"
                    },
                    "cseStorageAccountKey": {
                        "value": "[parameters('cseStorageAccountKey')]"
                    },
                    "cseManagedIdentity": {
                        "value": "[parameters('cseManagedIdentity')]"
                    },
                    "maxPriceForLowPriorityVm": {
                        "value": "[parameters('maxPriceForLowPriorityVm')]"
                    },
                    "accountSasProperties": {
                        "value": "[variables('accountSasProperties')]"
                    },
                    "roleAssignments": {
                        "value": "[parameters('roleAssignments')]"
                    },
                    "builtInRoleNames": {
                        "value": "[variables('builtInRoleNames')]"
                    },
                    "backupVaultName": {
                        "value": "[parameters('backupVaultName')]"
                    },
                    "backupVaultResourceGroup": {
                        "value": "[parameters('backupVaultResourceGroup')]"
                    },
                    "backupPolicyName": {
                        "value": "[parameters('backupPolicyName')]"
                    }
                },
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "vmNames": {
                            "type": "array"
                        },
                        "nicConfigurations": {
                            "type": "array"
                        },
                        "avSetNames": {
                            "type": "array"
                        },
                        "maxNumberOfVmsPerAvSet": {
                            "type": "int"
                        },
                        "maxNumberOfVmsPerDeployment": {
                            "type": "int"
                        },
                        "bulkVMdeploymentLoopIndex": {
                            "type": "int"
                        },
                        "proximityPlacementGroupName": {
                            "type": "string"
                        },
                        "location": {
                            "type": "string"
                        },
                        "tags": {
                            "type": "object"
                        },
                        "vmComputerNames": {
                            "type": "object"
                        },
                        "vmComputerNamesTransformation": {
                            "type": "string"
                        },
                        "useAvailabilityZone": {
                            "type": "bool"
                        },
                        "availabilityZones": {
                            "type": "array"
                        },
                        "plan": {
                            "type": "object"
                        },
                        "lockForDeletion": {
                            "type": "bool"
                        },
                        "diagnosticSettingName": {
                            "type": "string"
                        },
                        "diagnosticStorageAccountId": {
                            "type": "string"
                        },
                        "workspaceId": {
                            "type": "string"
                        },
                        "eventHubAuthorizationRuleId": {
                            "type": "string"
                        },
                        "eventHubName": {
                            "type": "string"
                        },
                        "diagnosticsMetrics": {
                            "type": "array"
                        },
                        "diagnosticLogsRetentionInDays": {
                            "type": "int"
                        },
                        "vmSize": {
                            "type": "string"
                        },
                        "imageReference": {
                            "type": "object"
                        },
                        "osDisk": {
                            "type": "object"
                        },
                        "dataDisks": {
                            "type": "array"
                        },
                        "enableServerSideEncryption": {
                            "type": "bool"
                        },
                        "ultraSSDEnabled": {
                            "type": "bool"
                        },
                        "adminUsername": {
                            "type": "securestring"
                        },
                        "adminPassword": {
                            "type": "securestring"
                        },
                        "customData": {
                            "type": "string"
                        },
                        "windowsConfiguration": {
                            "type": "object"
                        },
                        "linuxConfiguration": {
                            "type": "object"
                        },
                        "certificatesToBeInstalled": {
                            "type": "array"
                        },
                        "allowExtensionOperations": {
                            "type": "bool"
                        },
                        "bootDiagnosticStorageAccountName": {
                            "type": "string"
                        },
                        "bootDiagnosticStorageAccountUri": {
                            "type": "string"
                        },
                        "vmPriority": {
                            "type": "string"
                        },
                        "enableEvictionPolicy": {
                            "type": "bool"
                        },
                        "dedicatedHostId": {
                            "type": "string"
                        },
                        "licenseType": {
                            "type": "string"
                        },
                        "domainName": {
                            "type": "string"
                        },
                        "domainJoinUser": {
                            "type": "string"
                        },
                        "domainJoinOU": {
                            "type": "string"
                        },
                        "domainJoinRestart": {
                            "type": "bool"
                        },
                        "domainJoinOptions": {
                            "type": "int"
                        },
                        "domainJoinPassword": {
                            "type": "securestring"
                        },
                        "enableMicrosoftAntiMalware": {
                            "type": "bool"
                        },
                        "microsoftAntiMalwareSettings": {
                            "type": "object"
                        },
                        "enableWindowsMMAAgent": {
                            "type": "bool"
                        },
                        "enableLinuxMMAAgent": {
                            "type": "bool"
                        },
                        "enableWindowsDiskEncryption": {
                            "type": "bool"
                        },
                        "forceUpdateTag": {
                            "type": "string"
                        },
                        "keyVaultUri": {
                            "type": "string"
                        },
                        "keyVaultId": {
                            "type": "string"
                        },
                        "keyEncryptionKeyURL": {
                            "type": "string"
                        },
                        "diskKeyEncryptionAlgorithm": {
                            "type": "string"
                        },
                        "diskEncryptionVolumeType": {
                            "type": "string"
                        },
                        "resizeOSDisk": {
                            "type": "bool"
                        },
                        "enableLinuxDiskEncryption": {
                            "type": "bool"
                        },
                        "enableWindowsDependencyAgent": {
                            "type": "bool"
                        },
                        "enableLinuxDependencyAgent": {
                            "type": "bool"
                        },
                        "enableNetworkWatcherWindows": {
                            "type": "bool"
                        },
                        "enableNetworkWatcherLinux": {
                            "type": "bool"
                        },
                        "identity": {
                            "type": "object"
                        },
                        "dscConfiguration": {
                            "type": "object"
                        },
                        "windowsScriptExtensionFileData": {
                            "type": "array"
                        },
                        "windowsScriptExtensionCommandToExecute": {
                            "type": "securestring"
                        },
                        "cseStorageAccountName": {
                            "type": "string"
                        },
                        "cseStorageAccountKey": {
                            "type": "string"
                        },
                        "cseManagedIdentity": {
                            "type": "object"
                        },
                        "maxPriceForLowPriorityVm": {
                            "type": "securestring"
                        },
                        "accountSasProperties": {
                            "type": "object"
                        },
                        "roleAssignments": {
                            "type": "array"
                        },
                        "builtInRoleNames": {
                            "type": "object"
                        },
                        "backupVaultName": {
                            "type": "string"
                        },
                        "backupVaultResourceGroup": {
                            "type": "string"
                        },
                        "backupPolicyName": {
                            "type": "string"
                        }
                    },
                    "resources": [
                        // Deployment VM Loop
                        {
                            "name": "[concat(parameters('vmNames')[copyIndex('vmLoop')], '-vmLoop')]",
                            "apiVersion": "2020-06-01",
                            "type": "Microsoft.Resources/deployments",
                            "condition": "[not(empty(parameters('nicConfigurations')))]",
                            "dependsOn": [
                            ],
                            "copy": {
                                "name": "vmLoop",
                                "count": "[length(parameters('vmNames'))]"
                            },
                            "properties": {
                                "mode": "Incremental",
                                "expressionEvaluationOptions": {
                                    "scope": "inner"
                                },
                                "parameters": {
                                    "location": {
                                        "value": "[parameters('location')]"
                                    },
                                    "tags": {
                                        "value": "[parameters('tags')]"
                                    },
                                    "vmLoopIndex": {
                                        "value": "[copyIndex('vmLoop')]"
                                    },
                                    "vmName": {
                                        "value": "[parameters('vmNames')[copyIndex('vmLoop')]]"
                                    },
                                    "vmComputerNames": {
                                        "value": "[parameters('vmComputerNames')]"
                                    },
                                    "vmComputerNamesTransformation": {
                                        "value": "[parameters('vmComputerNamesTransformation')]"
                                    },
                                    "useAvailabilityZone": {
                                        "value": "[parameters('useAvailabilityZone')]"
                                    },
                                    "availabilityZone": {
                                        "value": "[parameters('availabilityZones')[copyIndex('vmLoop')]]"
                                    },
                                    "plan": {
                                        "value": "[parameters('plan')]"
                                    },
                                    "nicConfigurations": {
                                        "value": "[parameters('nicConfigurations')]"
                                    },
                                    "lockForDeletion": {
                                        "value": "[parameters('lockForDeletion')]"
                                    },
                                    "diagnosticSettingName": {
                                        "value": "[parameters('diagnosticSettingName')]"
                                    },
                                    "diagnosticStorageAccountId": {
                                        "value": "[parameters('diagnosticStorageAccountId')]"
                                    },
                                    "workspaceId": {
                                        "value": "[parameters('workspaceId')]"
                                    },
                                    "eventHubAuthorizationRuleId": {
                                        "value": "[parameters('eventHubAuthorizationRuleId')]"
                                    },
                                    "eventHubName": {
                                        "value": "[parameters('eventHubName')]"
                                    },
                                    "diagnosticsMetrics": {
                                        "value": "[parameters('diagnosticsMetrics')]"
                                    },
                                    "diagnosticLogsRetentionInDays": {
                                        "value": "[parameters('diagnosticLogsRetentionInDays')]"
                                    },
                                    "vmSize": {
                                        "value": "[parameters('vmSize')]"
                                    },
                                    "imageReference": {
                                        "value": "[parameters('imageReference')]"
                                    },
                                    "osDisk": {
                                        "value": "[parameters('osDisk')]"
                                    },
                                    "dataDisks": {
                                        "value": "[parameters('dataDisks')]"
                                    },
                                    "enableServerSideEncryption": {
                                        "value": "[parameters('enableServerSideEncryption')]"
                                    },
                                    "ultraSSDEnabled": {
                                        "value": "[parameters('ultraSSDEnabled')]"
                                    },
                                    "adminUsername": {
                                        "value": "[parameters('adminUsername')]"
                                    },
                                    "adminPassword": {
                                        "value": "[parameters('adminPassword')]"
                                    },
                                    "customData": {
                                        "value": "[parameters('customData')]"
                                    },
                                    "windowsConfiguration": {
                                        "value": "[parameters('windowsConfiguration')]"
                                    },
                                    "linuxConfiguration": {
                                        "value": "[parameters('linuxConfiguration')]"
                                    },
                                    "certificatesToBeInstalled": {
                                        "value": "[parameters('certificatesToBeInstalled')]"
                                    },
                                    "allowExtensionOperations": {
                                        "value": "[parameters('allowExtensionOperations')]"
                                    },
                                    "bootDiagnosticStorageAccountName": {
                                        "value": "[parameters('bootDiagnosticStorageAccountName')]"
                                    },
                                    "bootDiagnosticStorageAccountUri": {
                                        "value": "[parameters('bootDiagnosticStorageAccountUri')]"
                                    },
                                    "avSetNames": {
                                        "value": "[parameters('avSetNames')]"
                                    },
                                    "maxNumberOfVmsPerAvSet": {
                                        "value": "[parameters('maxNumberOfVmsPerAvSet')]"
                                    },
                                    "maxNumberOfVmsPerDeployment": {
                                        "value": "[parameters('maxNumberOfVmsPerDeployment')]"
                                    },
                                    "bulkVMdeploymentLoopIndex": {
                                        "value": "[parameters('bulkVMdeploymentLoopIndex')]"
                                    },
                                    "proximityPlacementGroupName": {
                                        "value": "[parameters('proximityPlacementGroupName')]"
                                    },
                                    "vmPriority": {
                                        "value": "[parameters('vmPriority')]"
                                    },
                                    "enableEvictionPolicy": {
                                        "value": "[parameters('enableEvictionPolicy')]"
                                    },
                                    "dedicatedHostId": {
                                        "value": "[parameters('dedicatedHostId')]"
                                    },
                                    "licenseType": {
                                        "value": "[parameters('licenseType')]"
                                    },
                                    "domainName": {
                                        "value": "[parameters('domainName')]"
                                    },
                                    "domainJoinUser": {
                                        "value": "[parameters('domainJoinUser')]"
                                    },
                                    "domainJoinOU": {
                                        "value": "[parameters('domainJoinOU')]"
                                    },
                                    "domainJoinRestart": {
                                        "value": "[parameters('domainJoinRestart')]"
                                    },
                                    "domainJoinOptions": {
                                        "value": "[parameters('domainJoinOptions')]"
                                    },
                                    "domainJoinPassword": {
                                        "value": "[parameters('domainJoinPassword')]"
                                    },
                                    "enableMicrosoftAntiMalware": {
                                        "value": "[parameters('enableMicrosoftAntiMalware')]"
                                    },
                                    "microsoftAntiMalwareSettings": {
                                        "value": "[parameters('microsoftAntiMalwareSettings')]"
                                    },
                                    "enableWindowsMMAAgent": {
                                        "value": "[parameters('enableWindowsMMAAgent')]"
                                    },
                                    "enableLinuxMMAAgent": {
                                        "value": "[parameters('enableLinuxMMAAgent')]"
                                    },
                                    "enableWindowsDiskEncryption": {
                                        "value": "[parameters('enableWindowsDiskEncryption')]"
                                    },
                                    "forceUpdateTag": {
                                        "value": "[parameters('forceUpdateTag')]"
                                    },
                                    "keyVaultUri": {
                                        "value": "[parameters('keyVaultUri')]"
                                    },
                                    "keyVaultId": {
                                        "value": "[parameters('keyVaultId')]"
                                    },
                                    "keyEncryptionKeyURL": {
                                        "value": "[parameters('keyEncryptionKeyURL')]"
                                    },
                                    "diskKeyEncryptionAlgorithm": {
                                        "value": "[parameters('diskKeyEncryptionAlgorithm')]"
                                    },
                                    "diskEncryptionVolumeType": {
                                        "value": "[parameters('diskEncryptionVolumeType')]"
                                    },
                                    "resizeOSDisk": {
                                        "value": "[parameters('resizeOSDisk')]"
                                    },
                                    "enableLinuxDiskEncryption": {
                                        "value": "[parameters('enableLinuxDiskEncryption')]"
                                    },
                                    "enableWindowsDependencyAgent": {
                                        "value": "[parameters('enableWindowsDependencyAgent')]"
                                    },
                                    "enableLinuxDependencyAgent": {
                                        "value": "[parameters('enableLinuxDependencyAgent')]"
                                    },
                                    "enableNetworkWatcherWindows": {
                                        "value": "[parameters('enableNetworkWatcherWindows')]"
                                    },
                                    "enableNetworkWatcherLinux": {
                                        "value": "[parameters('enableNetworkWatcherLinux')]"
                                    },
                                    "identity": {
                                        "value": "[parameters('identity')]"
                                    },
                                    "dscConfiguration": {
                                        "value": "[parameters('dscConfiguration')]"
                                    },
                                    "windowsScriptExtensionFileData": {
                                        "value": "[parameters('windowsScriptExtensionFileData')]"
                                    },
                                    "windowsScriptExtensionCommandToExecute": {
                                        "value": "[parameters('windowsScriptExtensionCommandToExecute')]"
                                    },
                                    "cseStorageAccountName": {
                                        "value": "[parameters('cseStorageAccountName')]"
                                    },
                                    "cseStorageAccountKey": {
                                        "value": "[parameters('cseStorageAccountKey')]"
                                    },
                                    "cseManagedIdentity": {
                                        "value": "[parameters('cseManagedIdentity')]"
                                    },
                                    "maxPriceForLowPriorityVm": {
                                        "value": "[parameters('maxPriceForLowPriorityVm')]"
                                    },
                                    "accountSasProperties": {
                                        "value": "[parameters('accountSasProperties')]"
                                    },
                                    "roleAssignments": {
                                        "value": "[parameters('roleAssignments')]"
                                    },
                                    "builtInRoleNames": {
                                        "value": "[parameters('builtInRoleNames')]"
                                    },
                                    "backupVaultName": {
                                        "value": "[parameters('backupVaultName')]"
                                    },
                                    "backupVaultResourceGroup": {
                                        "value": "[parameters('backupVaultResourceGroup')]"
                                    },
                                    "backupPolicyName": {
                                        "value": "[parameters('backupPolicyName')]"
                                    }
                                },
                                "template": {
                                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                    "contentVersion": "1.0.0.0",
                                    "parameters": {
                                        "location": {
                                            "type": "string"
                                        },
                                        "tags": {
                                            "type": "object"
                                        },
                                        "vmName": {
                                            "type": "string"
                                        },
                                        "vmLoopIndex": {
                                            "type": "int"
                                        },
                                        "vmComputerNames": {
                                            "type": "object"
                                        },
                                        "vmComputerNamesTransformation": {
                                            "type": "string"
                                        },
                                        "useAvailabilityZone": {
                                            "type": "bool"
                                        },
                                        "availabilityZone": {
                                            "type": "string"
                                        },
                                        "plan": {
                                            "type": "object"
                                        },
                                        "nicConfigurations": {
                                            "type": "array"
                                        },
                                        "lockForDeletion": {
                                            "type": "bool"
                                        },
                                        "diagnosticSettingName": {
                                            "type": "string"
                                        },
                                        "diagnosticStorageAccountId": {
                                            "type": "string"
                                        },
                                        "workspaceId": {
                                            "type": "string"
                                        },
                                        "eventHubAuthorizationRuleId": {
                                            "type": "string"
                                        },
                                        "eventHubName": {
                                            "type": "string"
                                        },
                                        "diagnosticsMetrics": {
                                            "type": "array"
                                        },
                                        "diagnosticLogsRetentionInDays": {
                                            "type": "int"
                                        },
                                        "vmSize": {
                                            "type": "string"
                                        },
                                        "imageReference": {
                                            "type": "object"
                                        },
                                        "osDisk": {
                                            "type": "object"
                                        },
                                        "dataDisks": {
                                            "type": "array"
                                        },
                                        "enableServerSideEncryption": {
                                            "type": "bool"
                                        },
                                        "ultraSSDEnabled": {
                                            "type": "bool"
                                        },
                                        "adminUsername": {
                                            "type": "securestring"
                                        },
                                        "adminPassword": {
                                            "type": "securestring"
                                        },
                                        "customData": {
                                            "type": "string"
                                        },
                                        "windowsConfiguration": {
                                            "type": "object"
                                        },
                                        "linuxConfiguration": {
                                            "type": "object"
                                        },
                                        "certificatesToBeInstalled": {
                                            "type": "array"
                                        },
                                        "allowExtensionOperations": {
                                            "type": "bool"
                                        },
                                        "bootDiagnosticStorageAccountName": {
                                            "type": "string"
                                        },
                                        "bootDiagnosticStorageAccountUri": {
                                            "type": "string"
                                        },
                                        "avSetNames": {
                                            "type": "array"
                                        },
                                        "maxNumberOfVmsPerAvSet": {
                                            "type": "int"
                                        },
                                        "maxNumberOfVmsPerDeployment": {
                                            "type": "int"
                                        },
                                        "bulkVMdeploymentLoopIndex": {
                                            "type": "int"
                                        },
                                        "proximityPlacementGroupName": {
                                            "type": "string"
                                        },
                                        "vmPriority": {
                                            "type": "string"
                                        },
                                        "enableEvictionPolicy": {
                                            "type": "bool"
                                        },
                                        "dedicatedHostId": {
                                            "type": "string"
                                        },
                                        "licenseType": {
                                            "type": "string"
                                        },
                                        "domainName": {
                                            "type": "string"
                                        },
                                        "domainJoinUser": {
                                            "type": "string"
                                        },
                                        "domainJoinOU": {
                                            "type": "string"
                                        },
                                        "domainJoinRestart": {
                                            "type": "bool"
                                        },
                                        "domainJoinOptions": {
                                            "type": "int"
                                        },
                                        "domainJoinPassword": {
                                            "type": "securestring"
                                        },
                                        "enableMicrosoftAntiMalware": {
                                            "type": "bool"
                                        },
                                        "microsoftAntiMalwareSettings": {
                                            "type": "object"
                                        },
                                        "enableWindowsMMAAgent": {
                                            "type": "bool"
                                        },
                                        "enableLinuxMMAAgent": {
                                            "type": "bool"
                                        },
                                        "enableWindowsDiskEncryption": {
                                            "type": "bool"
                                        },
                                        "forceUpdateTag": {
                                            "type": "string"
                                        },
                                        "keyVaultUri": {
                                            "type": "string"
                                        },
                                        "keyVaultId": {
                                            "type": "string"
                                        },
                                        "keyEncryptionKeyURL": {
                                            "type": "string"
                                        },
                                        "diskKeyEncryptionAlgorithm": {
                                            "type": "string"
                                        },
                                        "diskEncryptionVolumeType": {
                                            "type": "string"
                                        },
                                        "resizeOSDisk": {
                                            "type": "bool"
                                        },
                                        "enableLinuxDiskEncryption": {
                                            "type": "bool"
                                        },
                                        "enableWindowsDependencyAgent": {
                                            "type": "bool"
                                        },
                                        "enableLinuxDependencyAgent": {
                                            "type": "bool"
                                        },
                                        "enableNetworkWatcherWindows": {
                                            "type": "bool"
                                        },
                                        "enableNetworkWatcherLinux": {
                                            "type": "bool"
                                        },
                                        "identity": {
                                            "type": "object"
                                        },
                                        "dscConfiguration": {
                                            "type": "object"
                                        },
                                        "windowsScriptExtensionFileData": {
                                            "type": "array"
                                        },
                                        "windowsScriptExtensionCommandToExecute": {
                                            "type": "securestring"
                                        },
                                        "cseStorageAccountName": {
                                            "type": "string"
                                        },
                                        "cseStorageAccountKey": {
                                            "type": "string"
                                        },
                                        "cseManagedIdentity": {
                                            "type": "object"
                                        },
                                        "maxPriceForLowPriorityVm": {
                                            "type": "securestring"
                                        },
                                        "accountSasProperties": {
                                            "type": "object"
                                        },
                                        "roleAssignments": {
                                            "type": "array"
                                        },
                                        "builtInRoleNames": {
                                            "type": "object"
                                        },
                                        "backupVaultName": {
                                            "type": "string"
                                        },
                                        "backupVaultResourceGroup": {
                                            "type": "string"
                                        },
                                        "backupPolicyName": {
                                            "type": "string"
                                        }
                                    },
                                    "variables": {
                                        "vmComputerName": "[if(contains(parameters('vmComputerNames'), parameters('vmName')), parameters('vmComputerNames')[parameters('vmName')], parameters('vmName') )]",
                                        "vmComputerNameTransformed": "[if(equals(parameters('vmComputerNamesTransformation'), 'uppercase'), toUpper(variables('vmComputerName')), if(equals(parameters('vmComputerNamesTransformation'), 'lowercase'), toLower(variables('vmComputerName')), variables('vmComputerName')))]",
                                        "availabilitySetName": "[if(not(empty(parameters('avSetNames'))), parameters('avSetNames')[div(add(parameters('vmLoopIndex'),mul(parameters('maxNumberOfVmsPerDeployment'),parameters('bulkVMdeploymentLoopIndex'))),parameters('maxNumberOfVmsPerAvSet'))], '')]",
                                        "nicName": "[if(equals(length(parameters('nicConfigurations')),1), concat(parameters('vmName'), parameters('nicConfigurations')[0].nicSuffix), json('[]'))]",
                                        "dnsServersValues": {
                                            "dnsServers": "[if(equals(length(parameters('nicConfigurations')),1), if(contains(parameters('nicConfigurations')[0], 'dnsServers'), parameters('nicConfigurations')[0].dnsServers, json('[]')), json('[]'))]"
                                        }
                                    },
                                    // Network Interfaces, PIP, Virtual Machine + Extensions, WindowsCustomScriptExtension, backup, rbac
                                    "resources": [
                                        // // Single Network Interface
                                        // Deployment PIP
                                        {
                                            "name": "[if(equals(length(parameters('nicConfigurations')),1), concat(parameters('vmName'), parameters('nicConfigurations')[0].nicSuffix, '-', parameters('nicConfigurations')[0].ipConfigurations[copyIndex('vmNicPipConfigLoop')].name , '-vmNicPipConfigLoop'),'dummyVmNicPipConfigLoop')]",
                                            "apiVersion": "2020-06-01",
                                            "type": "Microsoft.Resources/deployments",
                                            "condition": "[and(equals(length(parameters('nicConfigurations')),1), not(empty(parameters('nicConfigurations')[0].ipConfigurations)), contains(parameters('nicConfigurations')[0].ipConfigurations[copyIndex('vmNicPipConfigLoop')], 'enablePublicIP'), parameters('nicConfigurations')[0].ipConfigurations[copyIndex('vmNicPipConfigLoop')].enablePublicIP)]",
                                            "dependsOn": [
                                            ],
                                            "copy": {
                                                "name": "vmNicPipConfigLoop",
                                                "count": "[if(equals(length(parameters('nicConfigurations')),1), length(parameters('nicConfigurations')[0].ipConfigurations),0)]"
                                            },
                                            "properties": {
                                                "mode": "Incremental",
                                                "expressionEvaluationOptions": {
                                                    "scope": "inner"
                                                },
                                                "parameters": {
                                                    "location": {
                                                        "value": "[parameters('location')]"
                                                    },
                                                    "tags": {
                                                        "value": "[parameters('tags')]"
                                                    },
                                                    "vmName": {
                                                        "value": "[parameters('vmName')]"
                                                    },
                                                    "ipConfiguration": {
                                                        "value": "[parameters('nicConfigurations')[0].ipConfigurations[copyIndex('vmNicPipConfigLoop')]]"
                                                    },
                                                    "lockForDeletion": {
                                                        "value": "[parameters('lockForDeletion')]"
                                                    },
                                                    "diagnosticSettingName": {
                                                        "value": "[parameters('diagnosticSettingName')]"
                                                    },
                                                    "diagnosticStorageAccountId": {
                                                        "value": "[parameters('diagnosticStorageAccountId')]"
                                                    },
                                                    "workspaceId": {
                                                        "value": "[parameters('workspaceId')]"
                                                    },
                                                    "eventHubAuthorizationRuleId": {
                                                        "value": "[parameters('eventHubAuthorizationRuleId')]"
                                                    },
                                                    "eventHubName": {
                                                        "value": "[parameters('eventHubName')]"
                                                    },
                                                    "diagnosticsMetrics": {
                                                        "value": "[parameters('diagnosticsMetrics')]"
                                                    },
                                                    "diagnosticLogsRetentionInDays": {
                                                        "value": "[parameters('diagnosticLogsRetentionInDays')]"
                                                    }
                                                },
                                                "template": {
                                                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                                    "contentVersion": "1.0.0.0",
                                                    "parameters": {
                                                        "location": {
                                                            "type": "string"
                                                        },
                                                        "tags": {
                                                            "type": "object"
                                                        },
                                                        "vmName": {
                                                            "type": "string"
                                                        },
                                                        "ipConfiguration": {
                                                            "type": "object"
                                                        },
                                                        "lockForDeletion": {
                                                            "type": "bool"
                                                        },
                                                        "diagnosticSettingName": {
                                                            "type": "string"
                                                        },
                                                        "diagnosticStorageAccountId": {
                                                            "type": "string"
                                                        },
                                                        "workspaceId": {
                                                            "type": "string"
                                                        },
                                                        "eventHubAuthorizationRuleId": {
                                                            "type": "string"
                                                        },
                                                        "eventHubName": {
                                                            "type": "string"
                                                        },
                                                        "diagnosticsMetrics": {
                                                            "type": "array"
                                                        },
                                                        "diagnosticLogsRetentionInDays": {
                                                            "type": "int"
                                                        }
                                                    },
                                                    "variables": {
                                                        "pipName": "[if(contains(parameters('ipConfiguration'), 'publicIpNameSuffix'), concat(parameters('vmName'), parameters('ipConfiguration').publicIpNameSuffix), 'dummyPipName')]",
                                                        "pipDiagnosticsLogs": [
                                                            {
                                                                "category": "DDoSProtectionNotifications",
                                                                "enabled": true,
                                                                "retentionPolicy": {
                                                                    "enabled": true,
                                                                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                                                }
                                                            },
                                                            {
                                                                "category": "DDoSMitigationFlowLogs",
                                                                "enabled": true,
                                                                "retentionPolicy": {
                                                                    "enabled": true,
                                                                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                                                }
                                                            },
                                                            {
                                                                "category": "DDoSMitigationReports",
                                                                "enabled": true,
                                                                "retentionPolicy": {
                                                                    "enabled": true,
                                                                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                                                }
                                                            }
                                                        ]
                                                    },
                                                    "resources": [
                                                        // Network Interfaces Object PIP
                                                        {
                                                            "type": "Microsoft.Network/publicIPAddresses",
                                                            "apiVersion": "2020-08-01",
                                                            "name": "[variables('pipName')]",
                                                            "location": "[parameters('location')]",
                                                            "tags": "[parameters('tags')]",
                                                            "condition": "[and(contains(parameters('ipConfiguration') , 'enablePublicIP'), parameters('ipConfiguration').enablePublicIP)]",
                                                            "sku": {
                                                                "name": "Standard"
                                                            },
                                                            "properties": {
                                                                "publicIPAllocationMethod": "Static",
                                                                "publicIPPrefix": "[if(contains(parameters('ipConfiguration') , 'publicIPPrefixId'), if(not(empty(parameters('ipConfiguration').publicIPPrefixId)), json(concat('{\"id\": \"', parameters('ipConfiguration').publicIPPrefixId, '\"}')), json('null')), json('null'))]"
                                                            },
                                                            "zones": "[json('null')]",
                                                            "resources": [
                                                                {
                                                                    "type": "providers/locks",
                                                                    "apiVersion": "2016-09-01",
                                                                    "condition": "[and(and(contains(parameters('ipConfiguration'), 'enablePublicIP'), parameters('ipConfiguration').enablePublicIP),parameters('lockForDeletion'))]",
                                                                    "name": "Microsoft.Authorization/publicIpDoNotDelete",
                                                                    "dependsOn": [
                                                                        "[concat('Microsoft.Network/publicIPAddresses/', variables('pipName'))]"
                                                                    ],
                                                                    "comments": "Resource lock on Public IP",
                                                                    "properties": {
                                                                        "level": "CannotDelete"
                                                                    }
                                                                },
                                                                {
                                                                    "type": "Microsoft.Network/publicIPAddresses/providers/diagnosticSettings",
                                                                    "apiVersion": "2017-05-01-preview",
                                                                    "location": "[parameters('location')]",
                                                                    "tags": "[parameters('tags')]",
                                                                    "condition": "[and(and(contains(parameters('ipConfiguration'), 'enablePublicIP'), parameters('ipConfiguration').enablePublicIP), or(not(empty(parameters('diagnosticStorageAccountId'))),not(empty(parameters('workspaceId'))),not(empty(parameters('eventHubAuthorizationRuleId'))),not(empty(parameters('eventHubName')))))]",
                                                                    "name": "[concat(variables('pipName'), '/Microsoft.Insights/', parameters('diagnosticSettingName'))]",
                                                                    "dependsOn": [
                                                                        "[concat('Microsoft.Network/publicIPAddresses/', variables('pipName'))]"
                                                                    ],
                                                                    "properties": {
                                                                        "storageAccountId": "[if(empty(parameters('diagnosticStorageAccountId')), json('null'), parameters('diagnosticStorageAccountId'))]",
                                                                        "workspaceId": "[if(empty(parameters('workspaceId')), json('null'), parameters('workspaceId'))]",
                                                                        "eventHubAuthorizationRuleId": "[if(empty(parameters('eventHubAuthorizationRuleId')), json('null'), parameters('eventHubAuthorizationRuleId'))]",
                                                                        "eventHubName": "[if(empty(parameters('eventHubName')), json('null'), parameters('eventHubName'))]",
                                                                        "metrics": "[if(and(empty(parameters('diagnosticStorageAccountId')), empty(parameters('workspaceId')), empty(parameters('eventHubAuthorizationRuleId')), empty(parameters('eventHubName'))), json('null'), parameters('diagnosticsMetrics'))]",
                                                                        "logs": "[if(and(empty(parameters('diagnosticStorageAccountId')), empty(parameters('workspaceId')), empty(parameters('eventHubAuthorizationRuleId')), empty(parameters('eventHubName'))), json('null'), variables('pipDiagnosticsLogs'))]"
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            }
                                        },
                                        // Network Interface
                                        {
                                            "type": "Microsoft.Network/networkInterfaces",
                                            "apiVersion": "2020-08-01",
                                            "location": "[parameters('location')]",
                                            "tags": "[parameters('tags')]",
                                            "condition": "[and(equals(length(parameters('nicConfigurations')),1), not(empty(parameters('nicConfigurations')[0].ipConfigurations)))]",
                                            "name": "[if(equals(length(parameters('nicConfigurations')),1), variables('nicName'),'dummyVmNic')]",
                                            "dependsOn": [
                                                "vmNicPipConfigLoop"
                                            ],
                                            "properties": {
                                                "enableIPForwarding": "[if(contains(parameters('nicConfigurations')[0], 'enableIPForwarding'), parameters('nicConfigurations')[0].enableIPForwarding, 'false')]",
                                                "enableAcceleratedNetworking": "[if(contains(parameters('nicConfigurations')[0], 'enableAcceleratedNetworking'), parameters('nicConfigurations')[0].enableAcceleratedNetworking, 'false')]",
                                                "dnsSettings": "[if(contains(parameters('nicConfigurations')[0], 'dnsServers'), if(empty(parameters('nicConfigurations')[0].dnsServers), json('null'), variables('dnsServersValues')), json('null'))]",
                                                "copy": [
                                                    {
                                                        "name": "ipConfigurations",
                                                        "count": "[if(contains(parameters('nicConfigurations')[0], 'ipConfigurations'), length(parameters('nicConfigurations')[0].ipConfigurations),0)]",
                                                        "input": {
                                                            "name": "[if(contains(parameters('nicConfigurations')[0].ipConfigurations[copyIndex('ipConfigurations')], 'name'), parameters('nicConfigurations')[0].ipConfigurations[copyIndex('ipConfigurations')].name, concat('ipconfig', copyIndex('ipConfigurations', 1)))]",
                                                            "properties": {
                                                                "primary": "[if(equals(copyIndex('ipConfigurations'), 0), 'true', 'false')]",
                                                                "privateIPAllocationMethod": "[if(contains(parameters('nicConfigurations')[0].ipConfigurations[copyIndex('ipConfigurations')], 'vmIPAddress'), if(empty(parameters('nicConfigurations')[0].ipConfigurations[copyIndex('ipConfigurations')].vmIPAddress), 'Dynamic', 'Static'), 'Dynamic')]",
                                                                "publicIPAddress": "[if(contains(parameters('nicConfigurations')[0].ipConfigurations[copyIndex('ipConfigurations')], 'enablePublicIP'), if(parameters('nicConfigurations')[0].ipConfigurations[copyIndex('ipConfigurations')].enablePublicIP, json(concat('{\"id\":\"', resourceId('Microsoft.Network/publicIPAddresses', concat(parameters('vmName'), parameters('nicConfigurations')[0].ipConfigurations[copyIndex('ipConfigurations')].publicIpNameSuffix)),'\"}')), json('null')), json('null'))]",
                                                                "privateIPAddress": "[if(contains(parameters('nicConfigurations')[0].ipConfigurations[copyIndex('ipConfigurations')], 'vmIPAddress'), if(empty(parameters('nicConfigurations')[0].ipConfigurations[copyIndex('ipConfigurations')].vmIPAddress), json('null'), iacs.nextIP(parameters('nicConfigurations')[0].ipConfigurations[copyIndex('ipConfigurations')].vmIPAddress, parameters('vmLoopIndex'))), json('null'))]",
                                                                "subnet": {
                                                                    "id": "[parameters('nicConfigurations')[0].ipConfigurations[copyIndex('ipConfigurations')].subnetId]"
                                                                },
                                                                "loadBalancerBackendAddressPools": "[if(contains(parameters('nicConfigurations')[0].ipConfigurations[copyIndex('ipConfigurations')], 'loadBalancerBackendAddressPools'), parameters('nicConfigurations')[0].ipConfigurations[copyIndex('ipConfigurations')].loadBalancerBackendAddressPools, '')]",
                                                                "applicationSecurityGroups": "[if(contains(parameters('nicConfigurations')[0].ipConfigurations[copyIndex('ipConfigurations')], 'applicationSecurityGroups'), parameters('nicConfigurations')[0].ipConfigurations[copyIndex('ipConfigurations')].applicationSecurityGroups, '')]"
                                                            }
                                                        }
                                                    }
                                                ]
                                            },
                                            "resources": [
                                                {
                                                    "type": "providers/locks",
                                                    "apiVersion": "2016-09-01",
                                                    "condition": "[parameters('lockForDeletion')]",
                                                    "name": "Microsoft.Authorization/networkInterfaceDoNotDelete",
                                                    "dependsOn": [
                                                        "[concat('Microsoft.Network/networkInterfaces/', if(equals(length(parameters('nicConfigurations')),1), variables('nicName'),'dummyVmNic'))]"
                                                    ],
                                                    "comments": "Resource lock on Network Interface",
                                                    "properties": {
                                                        "level": "CannotDelete"
                                                    }
                                                },
                                                {
                                                    "type": "Microsoft.Network/networkInterfaces/providers/diagnosticSettings",
                                                    "apiVersion": "2017-05-01-preview",
                                                    "location": "[parameters('location')]",
                                                    "tags": "[parameters('tags')]",
                                                    "name": "[concat(if(equals(length(parameters('nicConfigurations')),1), variables('nicName'),'dummyVmNic'), '/Microsoft.Insights/', parameters('diagnosticSettingName'))]",
                                                    "condition": "[or(not(empty(parameters('diagnosticStorageAccountId'))),not(empty(parameters('workspaceId'))),not(empty(parameters('eventHubAuthorizationRuleId'))),not(empty(parameters('eventHubName'))))]",
                                                    "dependsOn": [
                                                        "[concat('Microsoft.Network/networkInterfaces/', if(equals(length(parameters('nicConfigurations')),1), variables('nicName'),'dummyVmNic'))]"
                                                    ],
                                                    "properties": {
                                                        "storageAccountId": "[if(empty(parameters('diagnosticStorageAccountId')), json('null'), parameters('diagnosticStorageAccountId'))]",
                                                        "workspaceId": "[if(empty(parameters('workspaceId')), json('null'), parameters('workspaceId'))]",
                                                        "eventHubAuthorizationRuleId": "[if(empty(parameters('eventHubAuthorizationRuleId')), json('null'), parameters('eventHubAuthorizationRuleId'))]",
                                                        "eventHubName": "[if(empty(parameters('eventHubName')), json('null'), parameters('eventHubName'))]",
                                                        "metrics": "[if(and(empty(parameters('diagnosticStorageAccountId')), empty(parameters('workspaceId')), empty(parameters('eventHubAuthorizationRuleId')), empty(parameters('eventHubName'))), json('null'), parameters('diagnosticsMetrics'))]"
                                                    }
                                                }
                                            ]
                                        },
                                        // // Multiple Network Interfaces
                                        // Deployment Nic Loop
                                        {
                                            "name": "[if(greater(length(parameters('nicConfigurations')),1), concat(parameters('vmName'), parameters('nicConfigurations')[copyIndex('vmNicDeployInnerLoop')].nicSuffix, '-vmNicDeployInnerLoop'), 'dummyVmNicDeployInnerLoop')]",
                                            "apiVersion": "2020-06-01",
                                            "type": "Microsoft.Resources/deployments",
                                            "condition": "[greater(length(parameters('nicConfigurations')),1)]",
                                            "dependsOn": [
                                            ],
                                            "copy": {
                                                "name": "vmNicDeployInnerLoop",
                                                "count": "[length(parameters('nicConfigurations'))]"
                                            },
                                            "properties": {
                                                "mode": "Incremental",
                                                "expressionEvaluationOptions": {
                                                    "scope": "inner"
                                                },
                                                "parameters": {
                                                    "location": {
                                                        "value": "[parameters('location')]"
                                                    },
                                                    "tags": {
                                                        "value": "[parameters('tags')]"
                                                    },
                                                    "vmName": {
                                                        "value": "[parameters('vmName')]"
                                                    },
                                                    "vmLoopIndex": {
                                                        "value": "[parameters('vmLoopIndex')]"
                                                    },
                                                    "nicConfiguration": {
                                                        "value": "[parameters('nicConfigurations')[copyIndex('vmNicDeployInnerLoop')]]"
                                                    },
                                                    "lockForDeletion": {
                                                        "value": "[parameters('lockForDeletion')]"
                                                    },
                                                    "diagnosticSettingName": {
                                                        "value": "[parameters('diagnosticSettingName')]"
                                                    },
                                                    "diagnosticStorageAccountId": {
                                                        "value": "[parameters('diagnosticStorageAccountId')]"
                                                    },
                                                    "workspaceId": {
                                                        "value": "[parameters('workspaceId')]"
                                                    },
                                                    "eventHubAuthorizationRuleId": {
                                                        "value": "[parameters('eventHubAuthorizationRuleId')]"
                                                    },
                                                    "eventHubName": {
                                                        "value": "[parameters('eventHubName')]"
                                                    },
                                                    "diagnosticsMetrics": {
                                                        "value": "[parameters('diagnosticsMetrics')]"
                                                    },
                                                    "diagnosticLogsRetentionInDays": {
                                                        "value": "[parameters('diagnosticLogsRetentionInDays')]"
                                                    }
                                                },
                                                "template": {
                                                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                                    "contentVersion": "1.0.0.0",
                                                    "parameters": {
                                                        "location": {
                                                            "type": "string"
                                                        },
                                                        "tags": {
                                                            "type": "object"
                                                        },
                                                        "vmName": {
                                                            "type": "string"
                                                        },
                                                        "vmLoopIndex": {
                                                            "type": "int"
                                                        },
                                                        "nicConfiguration": {
                                                            "type": "object"
                                                        },
                                                        "lockForDeletion": {
                                                            "type": "bool"
                                                        },
                                                        "diagnosticSettingName": {
                                                            "type": "string"
                                                        },
                                                        "diagnosticStorageAccountId": {
                                                            "type": "string"
                                                        },
                                                        "workspaceId": {
                                                            "type": "string"
                                                        },
                                                        "eventHubAuthorizationRuleId": {
                                                            "type": "string"
                                                        },
                                                        "eventHubName": {
                                                            "type": "string"
                                                        },
                                                        "diagnosticsMetrics": {
                                                            "type": "array"
                                                        },
                                                        "diagnosticLogsRetentionInDays": {
                                                            "type": "int"
                                                        }
                                                    },
                                                    "variables": {
                                                        "nicName": "[concat(parameters('vmName'), parameters('nicConfiguration').nicSuffix)]",
                                                        "dnsServersValues": {
                                                            "dnsServers": "[if(contains(parameters('nicConfiguration'), 'dnsServers'), parameters('nicConfiguration').dnsServers, json('[]'))]"
                                                        }
                                                    },
                                                    // Network Interfaces, PIP
                                                    "resources": [
                                                        // Deployment PIP Loop
                                                        {
                                                            "name": "[concat(parameters('vmName'), parameters('nicConfiguration').nicSuffix, '-', parameters('nicConfiguration').ipConfigurations[copyIndex('vmNicPipConfigLoop')].name, '-vmNicPipConfigLoop')]",
                                                            "apiVersion": "2020-06-01",
                                                            "type": "Microsoft.Resources/deployments",
                                                            "condition": "[and(not(empty(parameters('nicConfiguration').ipConfigurations)), contains(parameters('nicConfiguration').ipConfigurations[copyIndex('vmNicPipConfigLoop')], 'enablePublicIP'), parameters('nicConfiguration').ipConfigurations[copyIndex('vmNicPipConfigLoop')].enablePublicIP)]",
                                                            "dependsOn": [
                                                            ],
                                                            "copy": {
                                                                "name": "vmNicPipConfigLoop",
                                                                "count": "[length(parameters('nicConfiguration').ipConfigurations)]"
                                                            },
                                                            "properties": {
                                                                "mode": "Incremental",
                                                                "expressionEvaluationOptions": {
                                                                    "scope": "inner"
                                                                },
                                                                "parameters": {
                                                                    "location": {
                                                                        "value": "[parameters('location')]"
                                                                    },
                                                                    "tags": {
                                                                        "value": "[parameters('tags')]"
                                                                    },
                                                                    "vmName": {
                                                                        "value": "[parameters('vmName')]"
                                                                    },
                                                                    "ipConfiguration": {
                                                                        "value": "[parameters('nicConfiguration').ipConfigurations[copyIndex('vmNicPipConfigLoop')]]"
                                                                    },
                                                                    "lockForDeletion": {
                                                                        "value": "[parameters('lockForDeletion')]"
                                                                    },
                                                                    "diagnosticSettingName": {
                                                                        "value": "[parameters('diagnosticSettingName')]"
                                                                    },
                                                                    "diagnosticStorageAccountId": {
                                                                        "value": "[parameters('diagnosticStorageAccountId')]"
                                                                    },
                                                                    "workspaceId": {
                                                                        "value": "[parameters('workspaceId')]"
                                                                    },
                                                                    "eventHubAuthorizationRuleId": {
                                                                        "value": "[parameters('eventHubAuthorizationRuleId')]"
                                                                    },
                                                                    "eventHubName": {
                                                                        "value": "[parameters('eventHubName')]"
                                                                    },
                                                                    "diagnosticsMetrics": {
                                                                        "value": "[parameters('diagnosticsMetrics')]"
                                                                    },
                                                                    "diagnosticLogsRetentionInDays": {
                                                                        "value": "[parameters('diagnosticLogsRetentionInDays')]"
                                                                    }
                                                                },
                                                                "template": {
                                                                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                                                    "contentVersion": "1.0.0.0",
                                                                    "parameters": {
                                                                        "location": {
                                                                            "type": "string"
                                                                        },
                                                                        "tags": {
                                                                            "type": "object"
                                                                        },
                                                                        "vmName": {
                                                                            "type": "string"
                                                                        },
                                                                        "ipConfiguration": {
                                                                            "type": "object"
                                                                        },
                                                                        "lockForDeletion": {
                                                                            "type": "bool"
                                                                        },
                                                                        "diagnosticSettingName": {
                                                                            "type": "string"
                                                                        },
                                                                        "diagnosticStorageAccountId": {
                                                                            "type": "string"
                                                                        },
                                                                        "workspaceId": {
                                                                            "type": "string"
                                                                        },
                                                                        "eventHubAuthorizationRuleId": {
                                                                            "type": "string"
                                                                        },
                                                                        "eventHubName": {
                                                                            "type": "string"
                                                                        },
                                                                        "diagnosticsMetrics": {
                                                                            "type": "array"
                                                                        },
                                                                        "diagnosticLogsRetentionInDays": {
                                                                            "type": "int"
                                                                        }
                                                                    },
                                                                    "variables": {
                                                                        "pipName": "[if(contains(parameters('ipConfiguration'), 'publicIpNameSuffix'), concat(parameters('vmName'), parameters('ipConfiguration').publicIpNameSuffix), 'dummyPipName')]",
                                                                        "pipDiagnosticsLogs": [
                                                                            {
                                                                                "category": "DDoSProtectionNotifications",
                                                                                "enabled": true,
                                                                                "retentionPolicy": {
                                                                                    "enabled": true,
                                                                                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                                                                }
                                                                            },
                                                                            {
                                                                                "category": "DDoSMitigationFlowLogs",
                                                                                "enabled": true,
                                                                                "retentionPolicy": {
                                                                                    "enabled": true,
                                                                                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                                                                }
                                                                            },
                                                                            {
                                                                                "category": "DDoSMitigationReports",
                                                                                "enabled": true,
                                                                                "retentionPolicy": {
                                                                                    "enabled": true,
                                                                                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                                                                }
                                                                            }
                                                                        ]
                                                                    },
                                                                    "resources": [
                                                                        // PIP
                                                                        {
                                                                            "type": "Microsoft.Network/publicIPAddresses",
                                                                            "apiVersion": "2020-08-01",
                                                                            "name": "[variables('pipName')]",
                                                                            "location": "[parameters('location')]",
                                                                            "tags": "[parameters('tags')]",
                                                                            "condition": "[and(contains(parameters('ipConfiguration') , 'enablePublicIP'), parameters('ipConfiguration').enablePublicIP)]",
                                                                            "sku": {
                                                                                "name": "Standard"
                                                                            },
                                                                            "properties": {
                                                                                "publicIPAllocationMethod": "Static",
                                                                                "publicIPPrefix": "[if(contains(parameters('ipConfiguration') , 'publicIPPrefixId'), if(not(empty(parameters('ipConfiguration').publicIPPrefixId)), json(concat('{\"id\": \"', parameters('ipConfiguration').publicIPPrefixId, '\"}')), json('null')), json('null'))]"
                                                                            },
                                                                            "zones": "[json('null')]",
                                                                            "resources": [
                                                                                // PIP locks
                                                                                {
                                                                                    "type": "providers/locks",
                                                                                    "apiVersion": "2016-09-01",
                                                                                    "condition": "[and(and(contains(parameters('ipConfiguration'), 'enablePublicIP'), parameters('ipConfiguration').enablePublicIP),parameters('lockForDeletion'))]",
                                                                                    "name": "Microsoft.Authorization/publicIpDoNotDelete",
                                                                                    "dependsOn": [
                                                                                        "[concat('Microsoft.Network/publicIPAddresses/', variables('pipName'))]"
                                                                                    ],
                                                                                    "comments": "Resource lock on Public IP",
                                                                                    "properties": {
                                                                                        "level": "CannotDelete"
                                                                                    }
                                                                                },
                                                                                // PIP diagnostic settings
                                                                                {
                                                                                    "type": "Microsoft.Network/publicIPAddresses/providers/diagnosticSettings",
                                                                                    "apiVersion": "2017-05-01-preview",
                                                                                    "location": "[parameters('location')]",
                                                                                    "tags": "[parameters('tags')]",
                                                                                    "condition": "[and(and(contains(parameters('ipConfiguration'), 'enablePublicIP'), parameters('ipConfiguration').enablePublicIP), or(not(empty(parameters('diagnosticStorageAccountId'))),not(empty(parameters('workspaceId'))),not(empty(parameters('eventHubAuthorizationRuleId'))),not(empty(parameters('eventHubName')))))]",
                                                                                    "name": "[concat(variables('pipName'), '/Microsoft.Insights/', parameters('diagnosticSettingName'))]",
                                                                                    "dependsOn": [
                                                                                        "[concat('Microsoft.Network/publicIPAddresses/', variables('pipName'))]"
                                                                                    ],
                                                                                    "properties": {
                                                                                        "storageAccountId": "[if(empty(parameters('diagnosticStorageAccountId')), json('null'), parameters('diagnosticStorageAccountId'))]",
                                                                                        "workspaceId": "[if(empty(parameters('workspaceId')), json('null'), parameters('workspaceId'))]",
                                                                                        "eventHubAuthorizationRuleId": "[if(empty(parameters('eventHubAuthorizationRuleId')), json('null'), parameters('eventHubAuthorizationRuleId'))]",
                                                                                        "eventHubName": "[if(empty(parameters('eventHubName')), json('null'), parameters('eventHubName'))]",
                                                                                        "metrics": "[if(and(empty(parameters('diagnosticStorageAccountId')), empty(parameters('workspaceId')), empty(parameters('eventHubAuthorizationRuleId')), empty(parameters('eventHubName'))), json('null'), parameters('diagnosticsMetrics'))]",
                                                                                        "logs": "[if(and(empty(parameters('diagnosticStorageAccountId')), empty(parameters('workspaceId')), empty(parameters('eventHubAuthorizationRuleId')), empty(parameters('eventHubName'))), json('null'), variables('pipDiagnosticsLogs'))]"
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            }
                                                        },
                                                        // Network Interfaces
                                                        {
                                                            "type": "Microsoft.Network/networkInterfaces",
                                                            "apiVersion": "2020-08-01",
                                                            "location": "[parameters('location')]",
                                                            "tags": "[parameters('tags')]",
                                                            "dependsOn": [
                                                                "vmNicPipConfigLoop"
                                                            ],
                                                            "name": "[variables('nicName')]",
                                                            "properties": {
                                                                "enableIPForwarding": "[if(contains(parameters('nicConfiguration'), 'enableIPForwarding'), parameters('nicConfiguration').enableIPForwarding, 'false')]",
                                                                "enableAcceleratedNetworking": "[if(contains(parameters('nicConfiguration'), 'enableAcceleratedNetworking'), parameters('nicConfiguration').enableAcceleratedNetworking, 'false')]",
                                                                "dnsSettings": "[if(contains(parameters('nicConfiguration'), 'dnsServers'), if(empty(parameters('nicConfiguration').dnsServers), json('null'), variables('dnsServersValues')), json('null'))]",
                                                                "copy": [
                                                                    {
                                                                        "name": "ipConfigurations",
                                                                        "count": "[length(parameters('nicConfiguration').ipConfigurations)]",
                                                                        "input": {
                                                                            "name": "[if(contains(parameters('nicConfiguration').ipConfigurations[copyIndex('ipConfigurations')], 'name'), parameters('nicConfiguration').ipConfigurations[copyIndex('ipConfigurations')].name, concat('ipconfig', copyIndex('ipConfigurations', 1)))]",
                                                                            "properties": {
                                                                                "primary": "[if(equals(copyIndex('ipConfigurations'), 0), 'true', 'false')]",
                                                                                "privateIPAllocationMethod": "[if(contains(parameters('nicConfiguration').ipConfigurations[copyIndex('ipConfigurations')], 'vmIPAddress'), if(empty(parameters('nicConfiguration').ipConfigurations[copyIndex('ipConfigurations')].vmIPAddress), 'Dynamic', 'Static'), 'Dynamic')]",
                                                                                "publicIPAddress": "[if(contains(parameters('nicConfiguration').ipConfigurations[copyIndex('ipConfigurations')], 'enablePublicIP'), if(parameters('nicConfiguration').ipConfigurations[copyIndex('ipConfigurations')].enablePublicIP, json(concat('{\"id\":\"', resourceId('Microsoft.Network/publicIPAddresses', concat(parameters('vmName'), parameters('nicConfiguration').ipConfigurations[copyIndex('ipConfigurations')].publicIpNameSuffix)),'\"}')), json('null')), json('null'))]",
                                                                                "privateIPAddress": "[if(contains(parameters('nicConfiguration').ipConfigurations[copyIndex('ipConfigurations')], 'vmIPAddress'), if(empty(parameters('nicConfiguration').ipConfigurations[copyIndex('ipConfigurations')].vmIPAddress), json('null'), iacs.nextIP(parameters('nicConfiguration').ipConfigurations[copyIndex('ipConfigurations')].vmIPAddress, parameters('vmLoopIndex'))), json('null'))]",
                                                                                "subnet": {
                                                                                    "id": "[parameters('nicConfiguration').ipConfigurations[copyIndex('ipConfigurations')].subnetId]"
                                                                                },
                                                                                "loadBalancerBackendAddressPools": "[if(contains(parameters('nicConfiguration').ipConfigurations[copyIndex('ipConfigurations')], 'loadBalancerBackendAddressPools'), parameters('nicConfiguration').ipConfigurations[copyIndex('ipConfigurations')].loadBalancerBackendAddressPools, '')]",
                                                                                "applicationSecurityGroups": "[if(contains(parameters('nicConfiguration').ipConfigurations[copyIndex('ipConfigurations')], 'applicationSecurityGroups'), parameters('nicConfiguration').ipConfigurations[copyIndex('ipConfigurations')].applicationSecurityGroups, '')]"
                                                                            }
                                                                        }
                                                                    }
                                                                ]
                                                            },
                                                            "resources": [
                                                                {
                                                                    "type": "providers/locks",
                                                                    "apiVersion": "2016-09-01",
                                                                    "condition": "[parameters('lockForDeletion')]",
                                                                    "name": "Microsoft.Authorization/networkInterfaceDoNotDelete",
                                                                    "dependsOn": [
                                                                        "[concat('Microsoft.Network/networkInterfaces/', variables('nicName'))]"
                                                                    ],
                                                                    "comments": "Resource lock on Network Interface",
                                                                    "properties": {
                                                                        "level": "CannotDelete"
                                                                    }
                                                                },
                                                                {
                                                                    "type": "Microsoft.Network/networkInterfaces/providers/diagnosticSettings",
                                                                    "apiVersion": "2017-05-01-preview",
                                                                    "location": "[parameters('location')]",
                                                                    "tags": "[parameters('tags')]",
                                                                    "name": "[concat(variables('nicName'), '/Microsoft.Insights/', parameters('diagnosticSettingName'))]",
                                                                    "condition": "[or(not(empty(parameters('diagnosticStorageAccountId'))),not(empty(parameters('workspaceId'))),not(empty(parameters('eventHubAuthorizationRuleId'))),not(empty(parameters('eventHubName'))))]",
                                                                    "dependsOn": [
                                                                        "[concat('Microsoft.Network/networkInterfaces/', variables('nicName'))]"
                                                                    ],
                                                                    "properties": {
                                                                        "storageAccountId": "[if(empty(parameters('diagnosticStorageAccountId')), json('null'), parameters('diagnosticStorageAccountId'))]",
                                                                        "workspaceId": "[if(empty(parameters('workspaceId')), json('null'), parameters('workspaceId'))]",
                                                                        "eventHubAuthorizationRuleId": "[if(empty(parameters('eventHubAuthorizationRuleId')), json('null'), parameters('eventHubAuthorizationRuleId'))]",
                                                                        "eventHubName": "[if(empty(parameters('eventHubName')), json('null'), parameters('eventHubName'))]",
                                                                        "metrics": "[if(and(empty(parameters('diagnosticStorageAccountId')), empty(parameters('workspaceId')), empty(parameters('eventHubAuthorizationRuleId')), empty(parameters('eventHubName'))), json('null'), parameters('diagnosticsMetrics'))]"
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    ],
                                                    "functions": [
                                                        {
                                                            "namespace": "iacs",
                                                            "members": {
                                                                "nextIP": {
                                                                    "parameters": [
                                                                        {
                                                                            "name": "ip",
                                                                            "type": "string"
                                                                        },
                                                                        {
                                                                            "name": "operand",
                                                                            "type": "int"
                                                                        }
                                                                    ],
                                                                    "output": {
                                                                        "type": "string",
                                                                        "value": "[concat(split(parameters('ip'), '.')[0], '.' ,split(parameters('ip'), '.')[1], '.' ,split(parameters('ip'), '.')[2], '.', add(int(split(parameters('ip'), '.')[3]), parameters('operand')))]"
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        },
                                        // Virtual Machine + Extensions
                                        {
                                            "name": "[parameters('vmName')]",
                                            "type": "Microsoft.Compute/virtualMachines",
                                            "apiVersion": "2020-06-01",
                                            "dependsOn": [
                                                "[if(greater(length(parameters('nicConfigurations')),1), 'vmNicDeployInnerLoop', variables('nicName') )]"
                                            ],
                                            "location": "[parameters('location')]",
                                            "identity": "[parameters('identity')]",
                                            "tags": "[parameters('tags')]",
                                            "zones": "[if(parameters('useAvailabilityZone'), array(parameters('availabilityZone')), json('null'))]",
                                            "plan": "[if(empty(parameters('plan')), json('null'),parameters('plan'))]",
                                            "properties": {
                                                "hardwareProfile": {
                                                    "vmSize": "[parameters('vmSize')]"
                                                },
                                                "storageProfile": {
                                                    "imageReference": "[parameters('imageReference')]",
                                                    "osDisk": {
                                                        "name": "[concat(parameters('vmName'), '-disk-os-01')]",
                                                        "createOption": "[parameters('osDisk').createOption]",
                                                        "diskSizeGB": "[parameters('osDisk').diskSizeGB]",
                                                        "managedDisk": {
                                                            "storageAccountType": "[parameters('osDisk').managedDisk.storageAccountType]"
                                                        }
                                                    },
                                                    "copy": [
                                                        {
                                                            "name": "dataDisks",
                                                            "count": "[length(parameters('dataDisks'))]",
                                                            "input": {
                                                                "lun": "[copyIndex('dataDisks')]",
                                                                "name": "[concat(parameters('vmName'), '-disk-data-', padLeft(copyIndex('dataDisks',1),2,'0'))]",
                                                                "diskSizeGB": "[parameters('dataDisks')[copyIndex('dataDisks')].diskSizeGB]",
                                                                "createOption": "[parameters('dataDisks')[copyIndex('dataDisks')].createOption]",
                                                                "caching": "[parameters('dataDisks')[copyIndex('dataDisks')].caching]",
                                                                "managedDisk": {
                                                                    "storageAccountType": "[parameters('dataDisks')[copyIndex('dataDisks')].managedDisk.storageAccountType]",
                                                                    "diskEncryptionSet": {
                                                                        "id": "[if(parameters('enableServerSideEncryption'), parameters('dataDisks')[copyIndex('dataDisks')].managedDisk.diskEncryptionSet.id, json('null'))]"
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    ]
                                                },
                                                "additionalCapabilities": {
                                                    "ultraSSDEnabled": "[parameters('ultraSSDEnabled')]"
                                                },
                                                "osProfile": {
                                                    "computerName": "[variables('vmComputerNameTransformed')]",
                                                    "adminUsername": "[parameters('adminUsername')]",
                                                    "adminPassword": "[parameters('adminPassword')]",
                                                    "customData": "[if(empty(parameters('customData')), json('null'), base64(parameters('customData')))]",
                                                    "windowsConfiguration": "[if(empty(parameters('windowsConfiguration')), json('null'),parameters('windowsConfiguration'))]",
                                                    "linuxConfiguration": "[if(empty(parameters('linuxConfiguration')), json('null'),parameters('linuxConfiguration'))]",
                                                    "secrets": "[parameters('certificatesToBeInstalled')]",
                                                    "allowExtensionOperations": "[parameters('allowExtensionOperations')]"
                                                    //"requireGuestProvisionSignal": "[parameters('requireGuestProvisionSignal')]"
                                                },
                                                "networkProfile": {
                                                    "copy": [
                                                        {
                                                            "name": "networkInterfaces",
                                                            "count": "[length(parameters('nicConfigurations'))]",
                                                            "input": {
                                                                "properties": {
                                                                    "primary": "[if(equals(copyIndex('networkInterfaces'), 0), 'true', 'false')]"
                                                                },
                                                                "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(parameters('vmName'), parameters('nicConfigurations')[copyIndex('networkInterfaces')].nicSuffix))]"
                                                            }
                                                        }
                                                    ]
                                                },
                                                "diagnosticsProfile": {
                                                    "bootDiagnostics": {
                                                        "enabled": "[not(empty(parameters('bootDiagnosticStorageAccountName')))]",
                                                        "storageUri": "[if(empty(parameters('bootDiagnosticStorageAccountName')), json('null'), concat('https://', parameters('bootDiagnosticStorageAccountName'), parameters('bootDiagnosticStorageAccountUri')))]"
                                                    }
                                                },
                                                "availabilitySet": "[if(not(empty(variables('availabilitySetName'))), json(concat('{\"id\":\"', resourceId('Microsoft.Compute/availabilitySets', variables('availabilitySetName')),'\"}')), json('null'))]",
                                                "proximityPlacementGroup": "[if(empty(parameters('proximityPlacementGroupName')), json('null'), json(concat('{\"id\":\"', resourceId('Microsoft.Compute/proximityPlacementGroups', parameters('proximityPlacementGroupName')),'\"}')))]",
                                                "priority": "[parameters('vmPriority')]",
                                                "evictionPolicy": "[if(parameters('enableEvictionPolicy'), 'Deallocate', json('null'))]",
                                                "billingProfile": "[if(and(not(empty(parameters('vmPriority'))),not(empty(parameters('maxPriceForLowPriorityVm')))), json(concat('{\"maxPrice\":\"',parameters('maxPriceForLowPriorityVm'),'\"}')), json('null'))]",
                                                "host": "[if(not(empty(parameters('dedicatedHostId'))), json(concat('{\"id\":\"',parameters('dedicatedHostId'),'\"}')), json('null'))]",
                                                "licenseType": "[if(empty(parameters('licenseType')), json('null'),parameters('licenseType'))]"
                                            },
                                            "resources": [
                                                // VM locks
                                                {
                                                    "type": "providers/locks",
                                                    "apiVersion": "2016-09-01",
                                                    "condition": "[parameters('lockForDeletion')]",
                                                    "name": "Microsoft.Authorization/vmDoNotDelete",
                                                    "dependsOn": [
                                                        "[concat('Microsoft.Compute/virtualMachines/', parameters('vmName'))]"
                                                    ],
                                                    "comments": "Resource lock on Azure Virtual Machines",
                                                    "properties": {
                                                        "level": "CannotDelete"
                                                    }
                                                },
                                                // VM DomainJoin extension
                                                {
                                                    "type": "Microsoft.Compute/virtualMachines/extensions",
                                                    "name": "[concat(parameters('vmName'),'/DomainJoin')]",
                                                    "apiVersion": "2019-07-01",
                                                    "location": "[parameters('location')]",
                                                    "condition": "[not(empty(parameters('domainName')))]",
                                                    "dependsOn": [
                                                        "[concat('Microsoft.Compute/virtualMachines/', parameters('vmName'))]"
                                                    ],
                                                    "properties": {
                                                        "publisher": "Microsoft.Compute",
                                                        "type": "JsonADDomainExtension",
                                                        "typeHandlerVersion": "1.3",
                                                        "autoUpgradeMinorVersion": true,
                                                        "settings": {
                                                            "Name": "[parameters('domainName')]",
                                                            "User": "[parameters('domainJoinUser')]",
                                                            "OUPath": "[parameters('domainJoinOU')]",
                                                            "Restart": "[parameters('domainJoinRestart')]",
                                                            "Options": "[parameters('domainJoinOptions')]"
                                                        },
                                                        "protectedSettings": {
                                                            "Password": "[parameters('domainJoinPassword')]"
                                                        }
                                                    }
                                                },
                                                // VM MicrosoftAntiMalware extension
                                                {
                                                    "type": "Microsoft.Compute/virtualMachines/extensions",
                                                    "name": "[concat(parameters('vmName'), '/MicrosoftAntiMalware')]",
                                                    "apiVersion": "2019-07-01",
                                                    "location": "[parameters('location')]",
                                                    "condition": "[parameters('enableMicrosoftAntiMalware')]",
                                                    "dependsOn": [
                                                        "[concat('Microsoft.Compute/virtualMachines/', parameters('vmName'))]",
                                                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('vmName'), 'DomainJoin')]"
                                                    ],
                                                    "properties": {
                                                        "publisher": "Microsoft.Azure.Security",
                                                        "type": "IaaSAntimalware",
                                                        "typeHandlerVersion": "1.3",
                                                        "autoUpgradeMinorVersion": true,
                                                        "settings": "[parameters('microsoftAntiMalwareSettings')]"
                                                    }
                                                },
                                                // VM WindowsMMAAgent extension
                                                {
                                                    "type": "Microsoft.Compute/virtualMachines/extensions",
                                                    "name": "[concat(parameters('vmName'), '/WindowsMMAAgent')]",
                                                    "apiVersion": "2019-07-01",
                                                    "location": "[parameters('location')]",
                                                    "condition": "[parameters('enableWindowsMMAAgent')]",
                                                    "dependsOn": [
                                                        "[concat('Microsoft.Compute/virtualMachines/', parameters('vmName'))]",
                                                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('vmName'), 'MicrosoftAntiMalware')]"
                                                    ],
                                                    "properties": {
                                                        "publisher": "Microsoft.EnterpriseCloud.Monitoring",
                                                        "type": "MicrosoftMonitoringAgent",
                                                        "typeHandlerVersion": "1.0",
                                                        "autoUpgradeMinorVersion": true,
                                                        "settings": {
                                                            "workspaceId": "[if(empty(parameters('workspaceId')), 'dummy', reference(parameters('workspaceId'), '2015-11-01-preview').customerId)]"
                                                        },
                                                        "protectedSettings": {
                                                            "workspaceKey": "[if(empty(parameters('workspaceId')), 'dummy', listKeys(parameters('workspaceId'), '2015-11-01-preview').primarySharedKey)]"
                                                        }
                                                    }
                                                },
                                                // VM LinuxMMAAgent extension
                                                {
                                                    "type": "Microsoft.Compute/virtualMachines/extensions",
                                                    "name": "[concat(parameters('vmName'), '/LinuxMMAAgent')]",
                                                    "apiVersion": "2019-07-01",
                                                    "location": "[parameters('location')]",
                                                    "condition": "[parameters('enableLinuxMMAAgent')]",
                                                    "dependsOn": [
                                                        "[concat('Microsoft.Compute/virtualMachines/', parameters('vmName'))]",
                                                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('vmName'), 'WindowsMMAAgent')]"
                                                    ],
                                                    "properties": {
                                                        "publisher": "Microsoft.EnterpriseCloud.Monitoring",
                                                        "type": "OmsAgentForLinux",
                                                        "typeHandlerVersion": "1.7",
                                                        "autoUpgradeMinorVersion": true,
                                                        "settings": {
                                                            "workspaceId": "[if(empty(parameters('workspaceId')), 'dummy', reference(parameters('workspaceId'), '2015-11-01-preview').customerId)]"
                                                        },
                                                        "protectedSettings": {
                                                            "workspaceKey": "[if(empty(parameters('workspaceId')), 'dummy', listKeys(parameters('workspaceId'), '2015-11-01-preview').primarySharedKey)]"
                                                        }
                                                    }
                                                },
                                                // VM WindowsDiskEncryption extension
                                                {
                                                    "type": "Microsoft.Compute/virtualMachines/extensions",
                                                    "name": "[concat(parameters('vmName'), '/WindowsDiskEncryption')]",
                                                    "apiVersion": "2019-07-01",
                                                    "location": "[parameters('location')]",
                                                    "condition": "[parameters('enableWindowsDiskEncryption')]",
                                                    "dependsOn": [
                                                        "[concat('Microsoft.Compute/virtualMachines/', parameters('vmName'))]",
                                                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('vmName'), 'LinuxMMAAgent')]"
                                                    ],
                                                    "properties": {
                                                        "publisher": "Microsoft.Azure.Security",
                                                        "type": "AzureDiskEncryption",
                                                        "typeHandlerVersion": "2.2",
                                                        "autoUpgradeMinorVersion": true,
                                                        "forceUpdateTag": "[parameters('forceUpdateTag')]",
                                                        "settings": {
                                                            "EncryptionOperation": "EnableEncryption",
                                                            "KeyVaultURL": "[parameters('keyVaultUri')]",
                                                            "KeyVaultResourceId": "[parameters('keyVaultId')]",
                                                            "KeyEncryptionKeyURL": "[parameters('keyEncryptionKeyURL')]",
                                                            "KekVaultResourceId": "[parameters('keyVaultId')]",
                                                            "KeyEncryptionAlgorithm": "[parameters('diskKeyEncryptionAlgorithm')]",
                                                            "VolumeType": "[parameters('diskEncryptionVolumeType')]",
                                                            "ResizeOSDisk": "[parameters('resizeOSDisk')]"
                                                        }
                                                    }
                                                },
                                                // VM LinuxDiskEncryption extension
                                                {
                                                    "type": "Microsoft.Compute/virtualMachines/extensions",
                                                    "name": "[concat(parameters('vmName'), '/LinuxDiskEncryption')]",
                                                    "apiVersion": "2019-07-01",
                                                    "location": "[parameters('location')]",
                                                    "condition": "[parameters('enableLinuxDiskEncryption')]",
                                                    "dependsOn": [
                                                        "[concat('Microsoft.Compute/virtualMachines/', parameters('vmName'))]",
                                                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('vmName'), 'WindowsDiskEncryption')]"
                                                    ],
                                                    "properties": {
                                                        "publisher": "Microsoft.Azure.Security",
                                                        "type": "AzureDiskEncryptionForLinux",
                                                        "typeHandlerVersion": "1.1",
                                                        "autoUpgradeMinorVersion": true,
                                                        "forceUpdateTag": "[parameters('forceUpdateTag')]",
                                                        "settings": {
                                                            "EncryptionOperation": "EnableEncryption",
                                                            "KeyVaultURL": "[parameters('keyVaultUri')]",
                                                            "KeyVaultResourceId": "[parameters('keyVaultId')]",
                                                            "KeyEncryptionKeyURL": "[parameters('keyEncryptionKeyURL')]",
                                                            "KekVaultResourceId": "[parameters('keyVaultId')]",
                                                            "KeyEncryptionAlgorithm": "[parameters('diskKeyEncryptionAlgorithm')]",
                                                            "VolumeType": "[parameters('diskEncryptionVolumeType')]"
                                                        }
                                                    }
                                                },
                                                // VM DependencyAgentWindows extension
                                                {
                                                    "type": "Microsoft.Compute/virtualMachines/extensions",
                                                    "apiVersion": "2019-07-01",
                                                    "name": "[concat(parameters('vmName'), '/DependencyAgentWindows')]",
                                                    "location": "[parameters('location')]",
                                                    "condition": "[parameters('enableWindowsDependencyAgent')]",
                                                    "dependsOn": [
                                                        "[concat('Microsoft.Compute/virtualMachines/', parameters('vmName'))]",
                                                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('vmName'), 'LinuxDiskEncryption')]"
                                                    ],
                                                    "properties": {
                                                        "publisher": "Microsoft.Azure.Monitoring.DependencyAgent",
                                                        "type": "DependencyAgentWindows",
                                                        "typeHandlerVersion": "9.5",
                                                        "autoUpgradeMinorVersion": true
                                                    }
                                                },
                                                // VM DependencyAgentLinux extension
                                                {
                                                    "type": "Microsoft.Compute/virtualMachines/extensions",
                                                    "apiVersion": "2019-07-01",
                                                    "name": "[concat(parameters('vmName'), '/DependencyAgentLinux')]",
                                                    "location": "[parameters('location')]",
                                                    "condition": "[parameters('enableLinuxDependencyAgent')]",
                                                    "dependsOn": [
                                                        "[concat('Microsoft.Compute/virtualMachines/', parameters('vmName'))]",
                                                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('vmName'), 'DependencyAgentWindows')]"
                                                    ],
                                                    "properties": {
                                                        "publisher": "Microsoft.Azure.Monitoring.DependencyAgent",
                                                        "type": "DependencyAgentLinux",
                                                        "typeHandlerVersion": "9.5",
                                                        "autoUpgradeMinorVersion": true
                                                    }
                                                },
                                                // VM NetworkWatcherAgentWindows extension
                                                {
                                                    "type": "Microsoft.Compute/virtualMachines/extensions",
                                                    "name": "[concat(parameters('vmName'), '/NetworkWatcherAgentWindows')]",
                                                    "apiVersion": "2019-07-01",
                                                    "location": "[parameters('location')]",
                                                    "condition": "[parameters('enableNetworkWatcherWindows')]",
                                                    "dependsOn": [
                                                        "[concat('Microsoft.Compute/virtualMachines/', parameters('vmName'))]",
                                                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('vmName'), 'DependencyAgentLinux')]"
                                                    ],
                                                    "properties": {
                                                        "publisher": "Microsoft.Azure.NetworkWatcher",
                                                        "type": "NetworkWatcherAgentWindows",
                                                        "typeHandlerVersion": "1.4",
                                                        "autoUpgradeMinorVersion": true,
                                                        "settings": {
                                                        }
                                                    }
                                                },
                                                // VM NetworkWatcherAgentLinux extension
                                                {
                                                    "type": "Microsoft.Compute/virtualMachines/extensions",
                                                    "name": "[concat(parameters('vmName'), '/NetworkWatcherAgentLinux')]",
                                                    "apiVersion": "2019-07-01",
                                                    "location": "[parameters('location')]",
                                                    "condition": "[parameters('enableNetworkWatcherLinux')]",
                                                    "dependsOn": [
                                                        "[concat('Microsoft.Compute/virtualMachines/', parameters('vmName'))]",
                                                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('vmName'), 'NetworkWatcherAgentWindows')]"
                                                    ],
                                                    "properties": {
                                                        "publisher": "Microsoft.Azure.NetworkWatcher",
                                                        "type": "NetworkWatcherAgentLinux",
                                                        "typeHandlerVersion": "1.4",
                                                        "autoUpgradeMinorVersion": true,
                                                        "settings": {
                                                        }
                                                    }
                                                },
                                                // VM windowsDsc extension
                                                {
                                                    "type": "Microsoft.Compute/virtualMachines/extensions",
                                                    "name": "[concat(parameters('vmName'), '/windowsDsc')]",
                                                    "apiVersion": "2018-10-01",
                                                    "location": "[parameters('location')]",
                                                    "condition": "[not(empty(parameters('dscConfiguration')))]",
                                                    "dependsOn": [
                                                        "[concat('Microsoft.Compute/virtualMachines/', parameters('vmName'))]",
                                                        "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('vmName'), 'NetworkWatcherAgentLinux')]"
                                                    ],
                                                    "properties": {
                                                        "publisher": "Microsoft.Powershell",
                                                        "type": "DSC",
                                                        "typeHandlerVersion": "2.77",
                                                        "autoUpgradeMinorVersion": true,
                                                        "settings": "[parameters('dscConfiguration').settings]",
                                                        "protectedSettings": "[if( contains(parameters('dscConfiguration'), 'protectedSettings'), parameters('dscConfiguration').protectedSettings, json('null') )]"
                                                    }
                                                }
                                            ]
                                        },
                                        // This WindowsCustomScriptExtension has to be a top level resource, as the 'fileUris' property copy loop only works if this extension is not a nested resource within the VM.
                                        {
                                            "apiVersion": "2019-07-01",
                                            "type": "Microsoft.Compute/virtualMachines/extensions",
                                            "name": "[concat(parameters('vmName'), '/WindowsCustomScriptExtension')]",
                                            "location": "[parameters('location')]",
                                            "condition": "[and(not(empty(parameters('windowsScriptExtensionFileData'))),not(empty(parameters('windowsScriptExtensionCommandToExecute'))))]",
                                            "dependsOn": [
                                                "[concat('Microsoft.Compute/virtualMachines/', parameters('vmName'))]",
                                                "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('vmName'), 'windowsDsc')]"
                                            ],
                                            "properties": {
                                                "publisher": "Microsoft.Compute",
                                                "type": "CustomScriptExtension",
                                                "typeHandlerVersion": "1.9",
                                                "autoUpgradeMinorVersion": true,
                                                "settings": {
                                                    "copy": [
                                                        {
                                                            "name": "fileUris",
                                                            "count": "[length(parameters('windowsScriptExtensionFileData'))]",
                                                            "input": "[concat(parameters('windowsScriptExtensionFileData')[copyIndex('fileUris')].uri,if(contains(parameters('windowsScriptExtensionFileData')[copyIndex('fileUris')], 'storageAccountId'),concat('?',listAccountSas(parameters('windowsScriptExtensionFileData')[copyIndex('fileUris')].storageAccountId, '2019-04-01', parameters('accountSasProperties')).accountSasToken) , '' ))]"
                                                        }
                                                    ]
                                                },
                                                "protectedSettings": {
                                                    "commandToExecute": "[parameters('windowsScriptExtensionCommandToExecute')]",
                                                    "storageAccountName": "[if(not(empty(parameters('cseStorageAccountName'))), parameters('cseStorageAccountName'), json('null'))]",
                                                    "storageAccountKey": "[if(not(empty(parameters('cseStorageAccountKey'))), parameters('cseStorageAccountKey'), json('null'))]",
                                                    "managedIdentity": "[if(not(empty(parameters('cseManagedIdentity'))), parameters('cseManagedIdentity'), json('null'))]"
                                                }
                                            }
                                        },
                                        // Deployment VM Backup
                                        {
                                            "name": "[concat('add-', parameters('vmName'), '-ToBackup')]",
                                            "condition": "[not(empty(parameters('backupVaultName')))]",
                                            "type": "Microsoft.Resources/deployments",
                                            "apiVersion": "2020-06-01",
                                            "dependsOn": [
                                                "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('vmName'), 'WindowsCustomScriptExtension')]",
                                                "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('vmName'), 'NetworkWatcherAgentLinux')]"
                                            ],
                                            "resourceGroup": "[parameters('backupVaultResourceGroup')]",
                                            "properties": {
                                                "mode": "Incremental",
                                                "template": {
                                                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                                    "contentVersion": "1.0.0.0",
                                                    "resources": [
                                                        // VM Backup
                                                        {
                                                            "apiVersion": "2016-12-01",
                                                            "type": "Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers/protectedItems",
                                                            "name": "[concat(parameters('backupVaultName'), '/Azure/iaasvmcontainer;iaasvmcontainerv2;', resourceGroup().name, ';', parameters('vmName'), '/vm;iaasvmcontainerv2;', resourceGroup().name, ';', parameters('vmName'))]",
                                                            "properties": {
                                                                "protectedItemType": "Microsoft.Compute/virtualMachines",
                                                                "policyId": "[resourceId('Microsoft.RecoveryServices/vaults/backupPolicies', parameters('backupVaultName'), parameters('backupPolicyName'))]",
                                                                "sourceResourceId": "[resourceId('Microsoft.Compute/virtualMachines/', parameters('vmName'))]"
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        },
                                        // Deployment VM RBAC
                                        {
                                            "name": "[concat('rbac-', parameters('vmName'), '-', copyIndex('rbacDeplCopy'))]",
                                            "apiVersion": "2020-06-01",
                                            "type": "Microsoft.Resources/deployments",
                                            "condition": "[not(empty(parameters('roleAssignments')))]",
                                            "dependsOn": [
                                                "[parameters('vmName')]"
                                            ],
                                            "copy": {
                                                "name": "rbacDeplCopy",
                                                "count": "[length(parameters('roleAssignments'))]"
                                            },
                                            "properties": {
                                                "mode": "Incremental",
                                                "expressionEvaluationOptions": {
                                                    "scope": "inner"
                                                },
                                                "parameters": {
                                                    "roleAssignment": {
                                                        "value": "[parameters('roleAssignments')[copyIndex()]]"
                                                    },
                                                    "builtInRoleNames": {
                                                        "value": "[parameters('builtInRoleNames')]"
                                                    },
                                                    "vmName": {
                                                        "value": "[parameters('vmName')]"
                                                    }
                                                },
                                                "template": {
                                                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                                    "contentVersion": "1.0.0.0",
                                                    "parameters": {
                                                        "roleAssignment": {
                                                            "type": "object"
                                                        },
                                                        "builtInRoleNames": {
                                                            "type": "object"
                                                        },
                                                        "vmName": {
                                                            "type": "string"
                                                        }
                                                    },
                                                    "resources": [
                                                        // VM RBAC
                                                        {
                                                            "type": "Microsoft.Compute/virtualMachines/providers/roleAssignments",
                                                            "apiVersion": "2018-09-01-preview",
                                                            "name": "[concat(parameters('vmName'), '/Microsoft.Authorization/', guid(uniqueString(concat(parameters('vmName'), array(parameters('roleAssignment').principalIds)[copyIndex('innerRbacCopy')], parameters('roleAssignment').roleDefinitionIdOrName ) )))]",
                                                            "dependsOn": [
                                                            ],
                                                            "copy": {
                                                                "name": "innerRbacCopy",
                                                                "count": "[length(parameters('roleAssignment').principalIds)]"
                                                            },
                                                            "properties": {
                                                                "roleDefinitionId": "[if(contains(parameters('builtInRoleNames'), parameters('roleAssignment').roleDefinitionIdOrName ), parameters('builtInRoleNames')[parameters('roleAssignment').roleDefinitionIdOrName] , parameters('roleAssignment').roleDefinitionIdOrName )]",
                                                                "principalId": "[array(parameters('roleAssignment').principalIds)[copyIndex()]]"
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        }
                                    ],
                                    "functions": [
                                        {
                                            "namespace": "iacs",
                                            "members": {
                                                "nextIP": {
                                                    "parameters": [
                                                        {
                                                            "name": "ip",
                                                            "type": "string"
                                                        },
                                                        {
                                                            "name": "operand",
                                                            "type": "int"
                                                        }
                                                    ],
                                                    "output": {
                                                        "type": "string",
                                                        "value": "[concat(split(parameters('ip'), '.')[0], '.' ,split(parameters('ip'), '.')[1], '.' ,split(parameters('ip'), '.')[2], '.', add(int(split(parameters('ip'), '.')[3]), parameters('operand')))]"
                                                    }
                                                }
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    ],
                    "outputs": {
                        "deploymentOutput": {
                            "type": "array",
                            "value": "[parameters('vmNames')]",
                            "metadata": {
                                "description": "VM deployment outputs"
                            }
                        }
                    }
                }
            }
        }
    ],
    "functions": [
    ],
    "outputs": {
        "virtualMachinesResourceId": {
            "type": "array",
            "copy": {
                "count": "[length(variables('vmNames'))]",
                "input": "[resourceId('Microsoft.Compute/virtualMachines', variables('vmNames')[copyIndex()])]"
            },
            "metadata": {
                "description": "The Resource Id(s) of the VM(s)."
            }
        },
        "virtualMachinesResourceGroup": {
            "type": "string",
            "value": "[resourceGroup().name]",
            "metadata": {
                "description": "The name of the Resource Group the VM(s) was/were created in."
            }
        },
        "virtualMachinesName": {
            "type": "array",
            "value": "[variables('vmNames')]",
            "metadata": {
                "description": "The Names of the VMs."
            }
        },
        "deploymentCount": {
            "type": "int",
            "value": "[if(equals(mod(length(variables('vmNames')), parameters('maxNumberOfVmsPerDeployment')), 0), div(length(variables('vmNames')), parameters('maxNumberOfVmsPerDeployment') ), add(div(length(variables('vmNames')), parameters('maxNumberOfVmsPerDeployment') ),1))]",
            "metadata": {
                "description": "The number of VM deployments."
            }
        }
    }
}