#########################################################
## PUBLISH PIPELINE                                    ##
#########################################################
##
## This pipeline template contains the logic to publish module data as 
## - A build artifact and/or
## - As a new version to a given storage account and/or
## - As a new version as an UniversalPackage to a given artifact-feed 
##
#########################################################

##---------------------------------------------##
## TEMPLATE PARAMETERS                         ##
##---------------------------------------------##
##
## By default it uses the variables specified in the below [parameters] section. However, you can overwrite these variables in the 
##    referencing pipeline by providing the paramater explicitly.
##
## NOTE: If you don't need to overwrite a shared value, you can IGNORE this section 
##
##   |====================================================================================================================================================================================================================================|
##   | Parameter                             | Default Value                               | Description                                                                                         | Example                                |
##   |---------------------------------------|---------------------------------------------|-----------------------------------------------------------------------------------------------------|----------------------------------------|
##   | displayName                           | 'Publish module'                            | Name for the pipeline job                                                                           | 'Publish KeyVault'                     |
##   | serviceConnection                     | '$(serviceConnection)'                      | The service connection that connects to Azure                                                       | 'demo-internal'                        |
##   | poolName                              | '$(poolName)'                               | You can provide either a [poolname] or [vmImage] to run the job on                                  | 'Custom Deployment Pool'               |
##   | vmImage                               | '$(vmImage)'                                | You can provide either a [poolname] or [vmImage] to run the job on                                  | 'ubuntu20.04'                          |
##   | defaultJobTimeoutInMinutes            | 120                                         | The timeout for the job in this pipeline                                                            | 120                                    |
##   | moduleName                            | '$(moduleName)'                             | The name of the module to publish. If publishing to an artifacts feed, must be lower case.          | 'keyvault'                             |
##   | versionOption                         | '$(versionOption)'                          | The mode to handle the version increments [major|minor|patch|custom].                               | 'patch'                                |
##   | moduleVersion                         | '$(moduleVersion)'                          | The version to enforce if [versionOption] is set to [custom]                                        | '1.0.0'                                |
##   | modulesPath                           | '$(modulesPath)'                            | The path to the modules root folder. E.g. 'Modules/ARM'                                             | 'Modules/ARM'                          |
##   | modulePath                            | '$(modulePath)'                             | The path to the module to deploy. E.g. [$(modulesPath)/$(moduleName)]                               | '$(modulesPath)/$(moduleName)'         |
##   | componentStorageContainerName         | '$(componentStorageContainerName)'          | Required to publish to a storage account. Name of the blob container to publish to                  | 'components'                           |
##   | componentStorageAccountRGName         | '$(componentStorageAccountRGName)'          | Required to publish to a storage account. ResourceGroup of the storage account to publish to        | 'mgmt-rg'                              |
##   | componentStorageAccountRGLocation     | '$(componentStorageAccountRGLocation)'      | Required to publish to a storage account. Location of the storage account resource group            | 'West Europe'                          |
##   | componentStorageAccountSubscriptionId | '$(componentStorageAccountSubscriptionId)'  | Required to publish to a storage account. SubscriptionId of the storage account to publish to       | '477c9620-cb01-454f-9ebc-fc6b1df48c14' |
##   | componentStorageAccountName           | '$(componentStorageAccountName)'            | Required to publish to a storage account. Name of the storage account to publish to                 | 'componentssa'                         |
##   | componentTemplateSpecRGName           | '$(componentTemplateSpecRGName)'            | Required to publish to template spec. ResourceGroup of the template spec to publish to              | 'mgmt-rg'                              |
##   | componentTemplateSpecRGLocation       | '$(componentTemplateSpecRGLocation)'        | Required to publish to template spec. Location of the template spec resource group                  | 'West Europe'                          |
##   | componentTemplateSpecName             | '$(componentTemplateSpecName)'              | Required to publish to template spec. Name of the template spec to publish to                       | 'ts-test'                              |
##   | componentTemplateSpecDescription      | '$(componentTemplateSpecDescription)'       | Required to publish to template spec. Description of the template spec to publish to                | 'IaCs module'                          |
##   | vstsFeedName                          | '$(vstsFeedName)'                           | Required to publish to a DevOps feed. Name to the feed to publish to.                               | 'modules'                              |
##   | vstsFeedProject                       | '$(System.TeamProject)'                     | Required to publish to a DevOps feed. Name of the project hosting the artifacts feed. May be empty. | 'iacs'                                 |
##   | vstsFeedOrganization                  | '$(vstsFeedOrganization)'                   | Required to publish to a DevOps feed. Name of the organization hosting the artifacts feed.          | 'servicescode'                         |
##   | azurePowerShellVersion                | '$(azurePowerShellVersion)'                 | Used for configuring the Azure PowerShell Version, one of the example values.                       | 'latestVersion' or 'OtherVersion'      |
##   | preferredAzurePowerShellVersion       | '$(preferredAzurePowerShellVersion)'        | Used for configuring the Azure PowerShell Version, either an empty string or specific version.      | '4.4.0'                                |
##   |====================================================================================================================================================================================================================================|
##
##---------------------------------------------##

parameters:
  # Pipeline-related parameters
  checkoutRepositories: ''  
  displayName: 'Publish module'
  serviceConnection: '$(serviceConnection)'
  poolName: '$(poolName)'
  vmImage: '$(vmImage)'
  defaultJobTimeoutInMinutes: 120
  modulesRepository: '$(modulesRepository)'
  artifactName: '$(artifactName)'

  # Logic-related parameters
  ## Module-related
  moduleName: '$(moduleName)'
  versionOption: '$(versionOption)'
  moduleVersion: '$(moduleVersion)'
  modulesPath: '$(modulesPath)'
  modulePath: '$(modulePath)'

  ## StorageAccount-related
  componentStorageContainerName: '$(componentStorageContainerName)'
  componentStorageAccountRGName: '$(componentStorageAccountRGName)'
  componentStorageAccountRGLocation: '$(componentStorageAccountRGLocation)'
  componentStorageAccountSubscriptionId: '$(componentStorageAccountSubscriptionId)'
  componentStorageAccountName: '$(componentStorageAccountName)'

  ## TemplateSpec-related
  componentTemplateSpecRGName: '$(componentTemplateSpecRGName)'
  componentTemplateSpecRGLocation: '$(componentTemplateSpecRGLocation)'
  componentTemplateSpecName: '$(componentTemplateSpecName)'
  componentTemplateSpecDescription: '$(componentTemplateSpecDescription)'

  ## Artifact-Feed-related
  vstsFeedName: '$(vstsFeedName)'
  vstsFeedProject: '$(System.TeamProject)'
  vstsFeedOrganization: '$(vstsFeedOrganization)'

##---------------------------------------------##
## TEMPLATE LOGIC                              ##
##---------------------------------------------##
jobs:
- job:
  displayName: ${{ parameters.displayName }}
  timeoutInMinutes: ${{ parameters.defaultJobTimeoutInMinutes }}
  pool:
    ${{ if ne(parameters.vmImage, '') }}:
      vmImage: ${{ parameters.vmImage }}
    ${{ if ne(parameters.poolName, '') }}:
      name: ${{ parameters.poolName }}
  steps:
  
  # [Checkout Repositories] task(s)
  #--------------------------------
  - checkout: self
  - ${{ if ne(parameters.checkoutRepositories, '') }}:
    - ${{ each checkoutRepository in parameters.checkoutRepositories }}:
      - checkout: ${{ checkoutRepository }}
        fetchDepth: 1  # the depth of commits to ask Git to fetch; if not set defaults to no limit
        path: 's/${{ checkoutRepository }}'

 # [Multi Repo] Support task
 #-----------------------------
  - task: PowerShell@2
    displayName: Handle Multi-Repo Invocation
    inputs:
      targetType: inline
      pwsh: true
      script: |      
        # ---------------------------- #
        # HANDLE MULTI-REPO INVOCATION #
        # ---------------------------- #

        $componentsBasePath = "$(System.DefaultWorkingDirectory)"
        # Handle multiple-repositories
        if( "${{ join(';',parameters.checkoutRepositories) }}".length -gt 0) {
          Write-Verbose "Multi-Repo Checkout" -Verbose 
          Write-Host "##vso[task.setvariable variable=ENVMODULEPATH]$(modulesRepository)/${{ parameters.modulePath }}"
        } else {
          Write-Verbose "No Multi-Repo Checkout" -Verbose 
          Write-Host "##vso[task.setvariable variable=ENVMODULEPATH]${{ parameters.modulePath }}"
        }

  - task: CopyFiles@2
    displayName: Filter folders
    inputs:
      Contents: |
        $(ENVMODULEPATH)/Scripts/*
        $(ENVMODULEPATH)/Parameters/*
        $(ENVMODULEPATH)/deploy.json
      targetFolder: $(Build.ArtifactStagingDirectory)

  # [Build-Artifact publish] task(s)
  #---------------------------------
  - task: PublishBuildArtifacts@1
    condition: and(
        eq(variables['publishToBuildArtifacts'], true),
        succeeded()
      )
    displayName: Publish Build Artifact
    inputs:
      PathtoPublish: $(Build.ArtifactStagingDirectory)
      ArtifactName: '${{ parameters.artifactName}}'
      publishLocation: 'Container'

  # [Universal Artifact-feed publish] task(s)
  #--------------------------------
  - powershell: |
      # Load used functions
      . "$(System.DefaultWorkingDirectory)/$(templateFunctionsPath)/Initialize-UniversalArtifactPublish.ps1"

      $functionInput = @{
        moduleName            = '${{ parameters.moduleName }}'
        vstsFeedOrganization  = '${{ parameters.vstsFeedOrganization }}'
        vstsFeedProject       = '${{ parameters.vstsFeedProject }}'
        vstsFeedName          = '${{ parameters.vstsFeedName }}'
        uiCustomVersion       = '${{ parameters.uiCustomVersion }}'
        pipelineCustomVersion = '$(pipelineCustomVersion)'
        versioningOption      = '${{ parameters.versioningOption }}'
      }

      Write-Verbose "Invoke task with" -Verbose
      $functionInput

      $output = Initialize-UniversalArtifactPublish @functionInput -Verbose

      # Write output value(s) into pipeline environment
      $output.Keys | ForEach-Object { 
        Write-Host ("Publishing variable [{0}] with value [{1}] to pipeline environment" -f $_, $output[$_])
        Write-Host ("##vso[task.setVariable variable={0}]{1}" -f $_, $output[$_])
      }
    displayName: 'Prepare publish to artifacts feed'
    condition: and(
        eq(variables['publishToArtifactsFeed'], true),
        succeeded()
      )
    enabled: true
    env:
      TOKEN: $(system.accesstoken)

  - task: UniversalPackages@0
    condition: and(
        eq(variables['publishToArtifactsFeed'], true),
        succeeded(),
        succeeded()
      )
    displayName: Publish Universal Package ${{ parameters.moduleName }}
    inputs:
      command: publish
      publishDirectory: $(Build.ArtifactStagingDirectory)/${{ parameters.modulesPath }}
      ${{ if eq(parameters.vstsFeedProject, '') }}:
        vstsFeedPublish: "${{ parameters.vstsFeedName }}"
      ${{ if ne(parameters.vstsFeedProject, '') }}:
        vstsFeedPublish: "${{ parameters.vstsFeedProject }}/${{ parameters.vstsFeedName }}"
      vstsFeedPackagePublish: '$(lowerModuleName)'
      versionOption: '$(publishingMode)'
      versionPublish: '$(newVersionObject)'
      packagePublishDescription: '${{ parameters.moduleName }} Module'
      verbosity: 'error'
    enabled: true

  # [Nuget Artifact-feed publish] task(s)
  #--------------------------------------
  - task: NuGetToolInstaller@0
    displayName: "Use NuGet 4.x"
    inputs:
      versionSpec: 4.x
    enabled: true
  - task: AzurePowerShell@5
    displayName: Publish module to nuget artifacts feed
    condition: and(
        eq(variables['publishToNugetArtifactsFeed'], true),
        succeeded()
      )
    enabled: true
    inputs:
      azureSubscription: '${{ parameters.serviceConnection }}'
      azurePowerShellVersion: ${{ parameters.azurePowerShellVersion }}
      preferredAzurePowerShellVersion: ${{ parameters.preferredAzurePowerShellVersion }}
      pwsh: true
      ScriptType: InlineScript
      inline: |
        # Load used functions
        . "$(System.DefaultWorkingDirectory)/$(templateFunctionsPath)/Publish-ModuleToNuget.ps1"

        $functionInput = @{
          feedName          = "$(vstsNugetFeedName)" 
          feedurl           = "$(vstNugetFeedUrl)" 
          queueById         = "$(Build.QueuedById)" 
          customVersion     = '${{ parameters.uiCustomVersion }}'
          versioningOption  = '${{ parameters.versioningOption }}'
          moduleBase        = '$(System.DefaultWorkingDirectory)/${{ parameters.modulesPath }}/${{ parameters.moduleName }}'
          moduleName        = '${{ parameters.moduleName }}'
        }

        Write-Verbose "Invoke task with" -Verbose
        $functionInput

        # Separate population to avoid printing secret by accident
        $functionInput['systemAccessToken'] = "$(system.accesstoken)"

        Publish-ModuleToNuget @functionInput -Verbose

  # [Artifact-storage-account publish] task(s)
  #-------------------------------------------
  - task: AzureCLI@2
    displayName: Publish module to component storage account
    condition: and(
        eq(variables['publishToStorageAccount'], true),
        succeeded()
      )
    enabled: true
    inputs:
      azureSubscription: '${{ parameters.serviceConnection }}'
      scriptType: pscore
      scriptLocation: inlineScript
      failOnStandardError: false
      inlineScript: |
        # Load used functions
        . "$(System.DefaultWorkingDirectory)/$(templateFunctionsPath)/Publish-ModuleToStorageAccount.ps1"

        $functionInput = @{
          moduleName                            = '${{ parameters.moduleName }}'
          modulePath                            = '${{ parameters.modulePath }}'
          componentsBasePath                    = '$(Build.ArtifactStagingDirectory)'
          componentStorageAccountRGName         = '${{ parameters.componentStorageAccountRGName }}'
          componentStorageAccountRGLocation     = '${{ parameters.componentStorageAccountRGLocation }}'
          componentStorageAccountName           = '${{ parameters.componentStorageAccountName }}'
          componentStorageContainerName         = '${{ parameters.componentStorageContainerName }}'
          componentStorageAccountSubscriptionId = '${{ parameters.componentStorageAccountSubscriptionId }}'
          uiCustomVersion                       = '${{ parameters.uiCustomVersion }}'
          pipelineCustomVersion                 = '$(pipelineCustomVersion)'
          versioningOption                      = '${{ parameters.versioningOption }}'
        }

        Write-Verbose "Invoke task with" -Verbose
        $functionInput

        Publish-ModuleToStorageAccount @functionInput -Verbose
  
  # [template-spec publish] task(s)
  #-------------------------------------------
  - task: AzurePowerShell@5
    displayName: 'Publish module to template spec'
    condition: and(
        eq(variables['publishToTemplateSpec'], true),
        succeeded()
      )
    enabled: true
    inputs:
      azureSubscription: '${{ parameters.serviceConnection }}'
      azurePowerShellVersion: ${{ parameters.azurePowerShellVersion }}
      preferredAzurePowerShellVersion: ${{ parameters.preferredAzurePowerShellVersion }}
      pwsh: true
      ScriptType: InlineScript
      inline: |
        # Load used functions
        . "$(System.DefaultWorkingDirectory)/$(templateFunctionsPath)/Publish-ModuleToTemplateSpec.ps1"

        $functionInput = @{
          componentTemplateSpecName             = '${{ parameters.componentTemplateSpecName }}'
          modulePath                            = '${{ parameters.modulePath }}'
          componentsBasePath                    = '$(Build.ArtifactStagingDirectory)'
          componentTemplateSpecRGName           = '${{ parameters.componentTemplateSpecRGName }}'
          componentTemplateSpecRGLocation       = '${{ parameters.componentTemplateSpecRGLocation }}'
          componentTemplateSpecDescription      = '${{ parameters.componentTemplateSpecDescription }}'
          uiCustomVersion                       = '${{ parameters.uiCustomVersion }}'
          pipelineCustomVersion                 = '$(pipelineCustomVersion)'
          versioningOption                      = '${{ parameters.versioningOption }}'
        }

        Write-Verbose "Invoke task with" -Verbose
        $functionInput

        Publish-ModuleToTemplateSpec @functionInput -Verbose